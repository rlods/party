{"version":3,"sources":["reducers/containers.ts","reducers/messages.ts","reducers/modals.ts","reducers/player.ts","reducers/queue.ts","reducers/rooms.ts","reducers/tracks.ts","reducers/users.ts","utils/users.ts","reducers/index.ts","components/Common/Icon.tsx","components/Common/IconButton.tsx","components/Room/Controls.tsx","actions/index.ts","actions/messages.ts","actions/queue.ts","actions/tracks.ts","config/firebase.ts","utils/index.ts","utils/firebase.ts","actions/containers.ts","utils/history.ts","actions/rooms.ts","utils/colorpicker.ts","actions/player.ts","actions/modals.ts","containers/Room/Controls.ts","components/Room/Metas.tsx","components/Room/Cover.tsx","components/Room/Queue.tsx","selectors/tracks.ts","containers/Room/Queue.ts","components/App/Menu.tsx","actions/users.ts","selectors/users.ts","containers/App/Menu.ts","components/Room/Head.tsx","utils/rooms.ts","components/Room/index.tsx","selectors/rooms.ts","containers/Room/index.ts","components/Splash/index.tsx","containers/Splash/index.ts","components/Modals/Modal.tsx","containers/Modals/Modal.ts","components/Modals/FormModal.tsx","components/Users/ConnectUserModal.tsx","containers/Users/ConnectUserModal.ts","components/Room/CreateRoomModal.tsx","containers/Room/CreateRoomModal.ts","components/Users/CreateUserModal.tsx","containers/Users/CreateUserModal.ts","utils/api.ts","components/Room/SearchModal.tsx","containers/Room/SearchModal.ts","components/Room/UnlockRoomModal.tsx","containers/Room/UnlockRoomModal.ts","components/Modals/index.tsx","containers/Modals/index.ts","components/App/Messages.tsx","containers/App/Messages.ts","components/App/index.tsx","containers/App/index.ts","utils/player.ts","index.tsx"],"names":["INITIAL_STATE","fetching","error","containers","initialState","stack","playing","position","trackIds","room_color","fg","r","g","b","bg","room_id","rooms","tracks","user","res","id","secret","s","localStorage","getItem","d","JSON","parse","atob","i","console","log","err","load","users","rootReducer","combineReducers","state","action","type","payload","copy","container","messages","filter","other","modals","pop","player","queue","splice","track","setItem","btoa","stringify","save","Icon","Component","render","this","props","className","icon","title","classNames","name","IconButton","kind","onClick","aria-label","clickable","CancelButton","Controls","onPlay","onSearch","onStop","createAction","MESSAGE_ID_GENERATOR","displayMessage","text","duration","dispatch","setTimeout","removeMessage","displayError","response","data","message","pushTracks","setTracks","loadTrack","trackId","enqueue","play","getState","api","previewPlayer","a","preview","config","databaseURL","process","firebaseApp","firebase","firebaseConfig","firebaseDatabase","MEMBERS","ref","ROOMS","USERS","Room","_room","child","_info","_members","_values","timestamp","track_id","track_position","init","values","subscribeInfo","snapshot","newValues","val","update","wait","Promise","resolve","reject","once","Error","cb","on","set","info","ServerValue","TIMESTAMP","getInfo","subscribeMembers","cbAdded","cbRemoved","unsubscribeInfo","off","unsubscribeMembers","User","_user","_membership","online","status","installDisconnect","onDisconnect","cancel","enter","room","remove","exit","loadContainer","containerType","containerId","containerTypeId","loadAlbum","loadPlaylist","length","map","toString","previewContainer","createHashHistory","setRoom","setRooms","setRoomColor","color","createRoom","v4","FirebaseRoom","enterRoom","FIREBASE_ROOM","FIREBASE_CB","exitRoom","history","push","unlockRoom","queueTracks","CACHE","pickColor","url","value","jimp","image","resize","getPixelColor","pixel","PLAYER_TIMER","PLAYER_POSITION","startPlayer","queuePlayer","setInterval","album","cover_small","stopPlayer","_","clearInterval","stop","startPreview","stopPreview","_1","_2","openModal","prereq","popModal","connect","AlbumMeta","href","link","target","rel","artist","PlaylistMeta","playlist","TrackMeta","Cover","style","backgroundImage","Queue","playingPosition","index","key","extractTracks","Menu","onCreateRoom","onDisconnectUser","onConnectUser","to","setUser","setUsers","createUser","FirebaseUser","connectUser","FIREBASE_USER","disconnectUser","reconnectUser","extractUser","Head","roomId","window","location","origin","componentDidMount","onEnter","componentWillUnmount","onExit","match","params","roomColor","backgroundColor","withRouter","extractRoom","ownProps","Splash","Modal","children","renderFoot","onClose","onPop","has_prev_modal","onSubmit","hidden","event","preventDefault","FormModal","renderButtons","ConnectUserModal","idRef","createRef","onConnect","htmlFor","placeholder","maxLength","minLength","required","onChange","e","setState","onToggle","onError","trim","current","focus","CreateRoomModal","nameRef","onCreate","CreateUserModal","DEFAULT_API","asyncJsonp","jsonp","call","path","qs","fullpath","search","query","encodeURIComponent","searchAlbums","searchPlaylists","searchTracks","searchAll","all","albums","playlists","forEach","Api","SearchResult","items","label","slice","item","SearchModal","queryRef","playingId","playingType","results","total","renderInputs","renderResults","onSelectContainer","onSelectTrack","onPreviewContainer","onStopPreview","picture_small","onPreviewTrack","UnlockRoomModal","secretRef","onJoin","onUnlock","Modals","curr_prereq","prev_prereq","document","addEventListener","onKeyDown","removeEventListener","componentDidUpdate","prevProps","oldPrereq","newPrereq","modal","getModal","in","timeout","unmountOnExit","onClickOverlay","role","onClickWrapper","stopPropagation","onCloseModal","keyCode","Messages","React","renderMessage","App","onReconnect","exact","component","AUDIO_CONTEXT","getContext","AudioContext","webkitAudioContext","decodeAudioData","encodedBuffer","fixAudioContext","context","buffer","createBuffer","source","createBufferSource","destination","start","Player","analyserNode","gainNode","node","getNode","createGain","gain","createAnalyser","fftSize","bufferUrl","sourceNode","playCount","loadAudioBuffer","req","XMLHttpRequest","open","responseType","send","offset","loop","loopStart","loopEnd","onended","playbackRate","isPlaying","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","withExtraArgument","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.cea8e132.chunk.js","sourcesContent":["import { Reducer } from \"redux\";\nimport { AxiosError } from \"axios\";\nimport { ContainersAction } from \"../actions/containers\";\nimport { Containers } from \"../utils/containers\";\n\nexport type State = {\n  fetching: boolean;\n  error: null | AxiosError;\n  containers: Containers;\n};\n\nconst INITIAL_STATE: State = {\n  fetching: false,\n  error: null,\n  containers: {}\n};\n\nexport const containersReducer: Reducer<State, ContainersAction> = (\n  state = INITIAL_STATE,\n  action: ContainersAction\n): State => {\n  switch (action.type) {\n    case \"containers/FETCHING\":\n      return {\n        ...state,\n        fetching: true,\n        error: null\n      };\n    case \"containers/FETCHED\": {\n      return {\n        ...state,\n        fetching: false,\n        error: null\n      };\n    }\n    case \"containers/ERROR\":\n      return {\n        ...state,\n        fetching: false,\n        error: action.payload\n      };\n    case \"containers/SET_CONTAINERS\": {\n      const copy = { ...state, containers: { ...state.containers } };\n      for (const container of action.payload) {\n        copy.containers[`${container.type}|${container.id}`] = container;\n      }\n      return copy;\n    }\n    case \"containers/RESET\":\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n","import { Reducer } from \"redux\";\nimport { Message, MessagesAction } from \"../actions/messages\";\n\n// ------------------------------------------------------------------\n\nexport type State = Message[];\n\nexport const INITIAL_STATE: State = [];\n\nexport const messagesReducer: Reducer<State, MessagesAction> = (\n  state = INITIAL_STATE,\n  action\n): State => {\n  switch (action.type) {\n    case \"message/ADD\":\n      return [action.payload, ...state];\n    case \"message/REMOVE\":\n      return state.filter(other => other.id !== action.payload);\n    case \"message/RESET\":\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n","import { Reducer } from \"redux\";\nimport { ModalsAction, ModalPrereq } from \"../actions/modals\";\n\n// ------------------------------------------------------------------\n\nexport type ModalsState = {\n  stack: ModalPrereq[];\n};\n\n// ------------------------------------------------------------------\n\nexport const initialState: ModalsState = {\n  stack: []\n};\n\n// ------------------------------------------------------------------\n\nexport const modalsReducer: Reducer<ModalsState, ModalsAction> = (\n  state = initialState,\n  action\n): ModalsState => {\n  switch (action.type) {\n    case \"modals/OPEN\":\n      return {\n        ...state,\n        stack: [action.payload]\n      };\n    case \"modals/CLOSE\":\n      return {\n        ...state,\n        stack: []\n      };\n    case \"modals/PUSH\":\n      return {\n        ...state,\n        stack: [...state.stack, action.payload]\n      };\n    case \"modals/POP\":\n      const copy = [...state.stack];\n      copy.pop();\n      return {\n        ...state,\n        stack: copy\n      };\n    default:\n      return state;\n  }\n};\n","import { Reducer } from \"redux\";\nimport { PlayerAction } from \"../actions/player\";\n\n// ------------------------------------------------------------------\n\nexport type State = {\n  playing: boolean;\n};\n\nexport const INITIAL_STATE: State = {\n  playing: false\n};\n\nexport const playerReducer: Reducer<State, PlayerAction> = (\n  state = INITIAL_STATE,\n  action\n): State => {\n  switch (action.type) {\n    case \"player/START\":\n      return { ...state, playing: true };\n    case \"player/STOP\":\n      return { ...state, playing: false };\n    case \"player/RESET\":\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n","import { Reducer } from \"redux\";\nimport { QueueAction } from \"../actions/queue\";\n\n// ------------------------------------------------------------------\n\nexport type State = {\n  position: number;\n  trackIds: string[];\n};\n\nexport const INITIAL_STATE: State = {\n  position: 0,\n  trackIds: []\n};\n\nexport const queueReducer: Reducer<State, QueueAction> = (\n  state = INITIAL_STATE,\n  action\n): State => {\n  switch (action.type) {\n    case \"queue/PUSH\":\n      return { ...state, trackIds: [...state.trackIds, ...action.payload] };\n    case \"queue/REMOVE\":\n      const copy = [...state.trackIds];\n      copy.splice(action.payload, 1);\n      return {\n        ...state,\n        position:\n          action.payload < state.position ? state.position - 1 : state.position,\n        trackIds: copy\n      };\n    case \"queue/SET_POSITION\":\n      return {\n        ...state,\n        position: action.payload\n      };\n    case \"queue/RESET\":\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n","import { Reducer } from \"redux\";\nimport { AxiosError } from \"axios\";\nimport { RoomsAction } from \"../actions/rooms\";\nimport { Rooms } from \"../utils/rooms\";\nimport { CombinedColor } from \"../utils/colorpicker\";\n\nexport type State = {\n  fetching: boolean;\n  error: null | AxiosError;\n  room_color: CombinedColor;\n  room_id: string;\n  rooms: Rooms;\n};\n\nconst INITIAL_STATE: State = {\n  fetching: false,\n  error: null,\n  room_color: { fg: { r: 0, g: 0, b: 0 }, bg: { r: 255, g: 255, b: 255 } },\n  room_id: \"\",\n  rooms: {}\n};\n\nexport const roomsReducer: Reducer<State, RoomsAction> = (\n  state = INITIAL_STATE,\n  action: RoomsAction\n): State => {\n  switch (action.type) {\n    case \"rooms/FETCHING\":\n      return {\n        ...state,\n        fetching: true,\n        error: null\n      };\n    case \"rooms/FETCHED\": {\n      return {\n        ...state,\n        fetching: false,\n        error: null\n      };\n    }\n    case \"rooms/ERROR\":\n      return {\n        ...state,\n        fetching: false,\n        error: action.payload\n      };\n    case \"rooms/SET_ROOM\": {\n      return {\n        ...state,\n        room_id: action.payload\n      };\n    }\n    case \"rooms/SET_ROOMS\": {\n      return {\n        ...state,\n        rooms: { ...state.rooms, ...action.payload }\n      };\n    }\n    case \"rooms/SET_ROOM_COLOR\": {\n      return {\n        ...state,\n        room_color: action.payload\n      };\n    }\n    case \"rooms/RESET\":\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n","import { Reducer } from \"redux\";\nimport { AxiosError } from \"axios\";\nimport { TracksAction } from \"../actions/tracks\";\nimport { Tracks } from \"../utils/tracks\";\n\nexport type State = {\n  fetching: boolean;\n  error: null | AxiosError;\n  tracks: Tracks;\n};\n\nconst INITIAL_STATE: State = {\n  fetching: false,\n  error: null,\n  tracks: {}\n};\n\nexport const tracksReducer: Reducer<State, TracksAction> = (\n  state = INITIAL_STATE,\n  action: TracksAction\n): State => {\n  switch (action.type) {\n    case \"tracks/FETCHING\":\n      return {\n        ...state,\n        fetching: true,\n        error: null\n      };\n    case \"tracks/FETCHED\": {\n      return {\n        ...state,\n        fetching: false,\n        error: null\n      };\n    }\n    case \"tracks/ERROR\":\n      return {\n        ...state,\n        fetching: false,\n        error: action.payload\n      };\n    case \"tracks/SET_TRACKS\": {\n      const copy = { ...state, tracks: { ...state.tracks } };\n      for (const track of action.payload) {\n        copy.tracks[track.id] = track;\n      }\n      return copy;\n    }\n    case \"tracks/RESET\":\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n","import { Reducer } from \"redux\";\nimport { AxiosError } from \"axios\";\nimport { UsersAction } from \"../actions/users\";\nimport { Users, save, load, XXX } from \"../utils/users\";\n\n// ------------------------------------------------------------------\n\nexport type State = {\n  fetching: boolean;\n  error: null | AxiosError;\n  user: XXX;\n  users: Users;\n};\n\nconst INITIAL_STATE: State = {\n  fetching: false,\n  error: null,\n  user: load(),\n  users: {}\n};\n\n// ------------------------------------------------------------------\n\nexport const usersReducer: Reducer<State, UsersAction> = (\n  state = INITIAL_STATE,\n  action: UsersAction\n): State => {\n  switch (action.type) {\n    case \"users/FETCHING\":\n      return {\n        ...state,\n        fetching: true,\n        error: null\n      };\n    case \"users/FETCHED\": {\n      return {\n        ...state,\n        fetching: false,\n        error: null\n      };\n    }\n    case \"users/ERROR\":\n      return {\n        ...state,\n        fetching: false,\n        error: action.payload\n      };\n    case \"users/SET_USER\": {\n      save(action.payload);\n      return {\n        ...state,\n        user: { ...action.payload }\n      };\n    }\n    case \"users/SET_USERS\": {\n      return {\n        ...state,\n        users: { ...state.users, ...action.payload }\n      };\n    }\n    case \"users/RESET\":\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n","export type User = {\n  name: string;\n  online: boolean;\n  room_id: string;\n  status: string;\n  timestamp: number;\n};\n\nexport type Users = { [id: string]: User };\n\n// ------------------------------------------------------------------\n\nexport type XXX = {\n  id: string;\n  secret: string;\n};\n\nexport const load = (): XXX => {\n  const res: XXX = {\n    id: \"\",\n    secret: \"\"\n  };\n  const s = localStorage.getItem(\"U\");\n  if (s) {\n    try {\n      const d = JSON.parse(atob(s));\n      if (typeof d.i === \"string\" && typeof d.s === \"string\") {\n        res.id = d.i;\n        res.secret = d.s;\n        console.log(\"LOADED: \", res);\n      }\n    } catch (err) {}\n  }\n  return res;\n};\n\nexport const save = ({ id, secret }: XXX) => {\n  localStorage.setItem(\n    \"U\",\n    btoa(\n      JSON.stringify({\n        i: id,\n        s: secret\n      })\n    )\n  );\n};\n","import { combineReducers } from \"redux\";\nimport { containersReducer as containers } from \"./containers\";\nimport { messagesReducer as messages } from \"./messages\";\nimport { modalsReducer as modals } from \"./modals\";\nimport { playerReducer as player } from \"./player\";\nimport { queueReducer as queue } from \"./queue\";\nimport { roomsReducer as rooms } from \"./rooms\";\nimport { tracksReducer as tracks } from \"./tracks\";\nimport { usersReducer as users } from \"./users\";\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const rootReducer = combineReducers({\n  containers,\n  messages,\n  modals,\n  player,\n  queue,\n  rooms,\n  tracks,\n  users\n});\n","import React, { Component } from \"react\";\nimport FontAwesome from \"react-fontawesome\";\nimport classNames from \"classnames\";\n//\nimport \"./Icon.scss\";\n\n// ------------------------------------------------------------------\n\nexport type Props = {\n  className?: string;\n  icon: string;\n  title?: string;\n};\n\nclass Icon extends Component<Props> {\n  public render = () => {\n    const { className, icon, title } = this.props;\n    return (\n      <FontAwesome\n        className={classNames(\"Icon\", className)}\n        name={icon}\n        title={title}\n      />\n    );\n  };\n}\n\nexport default Icon;\n","import React, { Component } from \"react\";\nimport classNames from \"classnames\";\n//\nimport Icon from \"./Icon\";\nimport \"./IconButton.scss\";\n\n// ------------------------------------------------------------------\n\ntype ButtonType = \"button\" | \"submit\";\n\nexport type Props = {\n  className?: string;\n  icon: string;\n  kind?: \"default\" | \"primary\" | \"danger\" | \"special\";\n  onClick?: () => void;\n  title: string;\n  type?: ButtonType;\n};\n\nclass IconButton extends Component<Props> {\n  public render = () => {\n    const {\n      className,\n      icon,\n      kind = \"default\",\n      onClick,\n      title,\n      type = \"button\"\n    } = this.props;\n    return (\n      <button\n        type={type}\n        aria-label={title}\n        className={classNames(\"IconButton\", className, kind, {\n          clickable: !!onClick || type === \"submit\"\n        })}\n        onClick={onClick}\n        title={title}\n      >\n        <Icon icon={icon} />\n      </button>\n    );\n  };\n}\n\nexport const CancelButton = ({ onClick }: { onClick: () => void }) => (\n  <IconButton onClick={onClick} title=\"Cancel\" kind=\"default\" icon=\"ban\" />\n);\n\nexport default IconButton;\n","import React, { Component } from \"react\";\n//\nimport { MappedProps } from \"../../containers/Room/Controls\";\nimport IconButton from \"../Common/IconButton\";\n\n// ------------------------------------------------------------------\n\nclass Controls extends Component<MappedProps> {\n  public render = () => {\n    const { onPlay, onSearch, onStop, playing } = this.props;\n    return (\n      <div className=\"Controls\">\n        <div className=\"Control\">\n          {!playing ? (\n            <IconButton onClick={onPlay} icon=\"play\" title=\"Play\" />\n          ) : (\n            <IconButton onClick={onStop} icon=\"pause\" title=\"Stop\" />\n          )}\n        </div>\n        <div className=\"Control\">\n          <IconButton onClick={onSearch} icon=\"search\" title=\"Search\" />\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default Controls;\n","import { AnyAction } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { RootState } from \"../reducers\";\nimport { Player } from \"../utils/player\";\nimport { Api } from \"../utils/api\";\n\n// ------------------------------------------------------------------\n\nexport type Action<T extends string> = {\n  type: T;\n};\n\nexport type ActionWithPayload<T extends string, P> = {\n  type: T;\n  payload: P;\n};\n\nexport type AsyncAction = ThunkAction<\n  void,\n  RootState,\n  {\n    api: ReturnType<typeof Api>;\n    previewPlayer: ReturnType<typeof Player>;\n    queuePlayer: ReturnType<typeof Player>;\n  },\n  AnyAction\n>;\n\nexport function createAction<T extends string>(type: T): Action<T>;\n\nexport function createAction<T extends string, P>(\n  type: T,\n  payload: P\n): ActionWithPayload<T, P>;\n\nexport function createAction<T extends string, P>(type: T, payload?: P) {\n  return payload === void 0 ? { type } : { type, payload };\n}\n","import { createAction, AsyncAction } from \".\";\n\n// ------------------------------------------------------------------\n\nlet MESSAGE_ID_GENERATOR: number = 0;\n\nexport const extractErrorMessage = (err: any) =>\n  err.response && err.response.data && err.response.data.message\n    ? err.response.data.message\n    : err.message;\n\nexport type Message = {\n  id: number;\n  text: string;\n  type: string;\n};\n\nexport type MessagesAction =\n  | ReturnType<typeof addMessage>\n  | ReturnType<typeof clearMessages>\n  | ReturnType<typeof removeMessage>;\n\nconst addMessage = (message: Message) => createAction(\"message/ADD\", message);\n\nconst removeMessage = (id: number) => createAction(\"message/REMOVE\", id);\n\nconst clearMessages = () => createAction(\"message/RESET\");\n\nexport const displayMessage = (\n  type: string,\n  text: string,\n  duration: number = 5000\n): AsyncAction => (dispatch): any => {\n  const id = MESSAGE_ID_GENERATOR++;\n  dispatch(addMessage({ id, text, type }));\n  setTimeout(() => dispatch(removeMessage(id)), duration);\n};\n\nexport const displayError = (text: string, error?: any): AsyncAction => (\n  dispatch\n): any => {\n  dispatch(\n    displayMessage(\n      \"error\",\n      error ? `${text}: ${extractErrorMessage(error)}` : text,\n      3000\n    )\n  );\n};\n\nexport const displayInfo = (text: string) => displayMessage(\"info\", text, 3000);\n","import { createAction } from \".\";\n\n// ------------------------------------------------------------------\n\nexport type QueueAction =\n  | ReturnType<typeof clearQueue>\n  | ReturnType<typeof pushTracks>\n  | ReturnType<typeof removeTrack>\n  | ReturnType<typeof setPosition>;\n\nexport const clearQueue = () => createAction(\"queue/RESET\");\n\nexport const pushTracks = (trackIds: string[]) =>\n  createAction(\"queue/PUSH\", trackIds);\n\nexport const removeTrack = (position: number) =>\n  createAction(\"queue/REMOVE\", position);\n\nexport const setPosition = (position: number) =>\n  createAction(\"queue/SET_POSITION\", position);\n","import { AxiosError } from \"axios\";\n//\nimport { createAction, AsyncAction } from \".\";\nimport { displayError } from \"./messages\";\nimport { pushTracks } from \"./queue\";\nimport { ApiTrack } from \"../utils/api\";\n\n// ------------------------------------------------------------------\n\nexport type TracksAction =\n  | ReturnType<typeof fetching>\n  | ReturnType<typeof success>\n  | ReturnType<typeof error>\n  | ReturnType<typeof reset>\n  | ReturnType<typeof setTracks>;\n\nconst fetching = () => createAction(\"tracks/FETCHING\");\nconst success = () => createAction(\"tracks/FETCHED\");\nconst error = (error: AxiosError) => createAction(\"tracks/ERROR\", error);\nconst reset = () => createAction(\"tracks/RESET\");\nexport const setTracks = (tracks: ApiTrack[]) =>\n  createAction(\"tracks/SET_TRACKS\", tracks);\n\n// ------------------------------------------------------------------\n\nexport const loadTrack = (\n  trackId: string,\n  enqueue: boolean,\n  play: boolean\n): AsyncAction => async (dispatch, getState, { api, previewPlayer }) => {\n  try {\n    const state = getState();\n    let track = state.tracks.tracks[trackId];\n    if (!track) {\n      console.log(\"Loading track...\", { trackId });\n      track = await api.loadTrack(trackId);\n      dispatch(setTracks([track]));\n    }\n    if (enqueue) {\n      console.log(\"Enqueuing track...\");\n      dispatch(pushTracks([trackId]));\n    }\n    if (play) {\n      console.log(\"Previewing track...\");\n      await previewPlayer.play(track.preview, 0);\n    }\n  } catch (err) {\n    dispatch(displayError(\"Cannot load track\", err));\n  }\n};\n","const config = {\n  databaseURL: process.env.REACT_APP_FIREBASE_URL\n};\n\nconsole.log(config);\n\nexport default config;\n","export const sleep = (delay: number) =>\n  new Promise(resolve => setTimeout(resolve, delay));\n","import * as firebase from \"firebase/app\";\nimport \"firebase/database\";\n//\nimport firebaseConfig from \"../config/firebase\";\nimport { Room as RoomInfo } from \"./rooms\";\nimport { User as UserInfo } from \"./users\";\nimport { sleep } from \".\";\n\n// ------------------------------------------------------------------\n\ntype FirebaseCB = (eventType: firebase.database.DataSnapshot) => void;\n\n// ------------------------------------------------------------------\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst firebaseDatabase = firebase.database(firebaseApp);\n\n// ------------------------------------------------------------------\n\nconst MEMBERS = firebaseDatabase.ref(\"members\");\nconst ROOMS = firebaseDatabase.ref(\"rooms\");\nconst USERS = firebaseDatabase.ref(\"users\");\n\n// ------------------------------------------------------------------\n\nexport const Room = (id: string, secret?: string) => {\n  const _room = ROOMS.child(id);\n  const _info = _room.child(\"info\");\n  const _members = MEMBERS.child(id);\n  let _values: RoomInfo = {\n    name: \"dummy\",\n    timestamp: 0,\n    track_id: 0,\n    track_position: 0,\n    type: \"dj\"\n  };\n\n  const getInfo = () => _values;\n\n  const init = async (values: Pick<RoomInfo, \"name\">) => {\n    subscribeInfo((snapshot: firebase.database.DataSnapshot) => {\n      const newValues = snapshot.val();\n      if (newValues) {\n        _values = newValues;\n      }\n    });\n    await update(values);\n  };\n\n  const wait = async (): Promise<RoomInfo> =>\n    new Promise((resolve, reject) => {\n      _info.once(\"value\", snapshot => {\n        const newValues = snapshot.val();\n        if (newValues) {\n          _values = newValues;\n          resolve(_values);\n        } else {\n          reject(new Error(\"Room is invalid\"));\n        }\n      });\n    });\n\n  const subscribeInfo = (cb: FirebaseCB) => {\n    _info.on(\"value\", cb);\n  };\n\n  const unsubscribeInfo = (cb: FirebaseCB) => {\n    _info.off(\"value\", cb);\n  };\n\n  const subscribeMembers = (cbAdded: FirebaseCB, cbRemoved: FirebaseCB) => {\n    _members.on(\"child_added\", cbAdded);\n    _members.on(\"child_removed\", cbRemoved);\n  };\n\n  const unsubscribeMembers = (cbAdded: FirebaseCB, cbRemoved: FirebaseCB) => {\n    _members.off(\"child_added\", cbAdded);\n    _members.off(\"child_removed\", cbRemoved);\n  };\n\n  const update = async ({\n    name,\n    track_id,\n    track_position,\n    type\n  }: Partial<\n    Pick<RoomInfo, \"name\" | \"track_id\" | \"track_position\" | \"type\">\n  >) => {\n    if (name !== void 0) {\n      _values.name = name;\n    }\n    if (track_id !== void 0) {\n      _values.track_id = track_id;\n    }\n    if (track_position !== void 0) {\n      _values.track_position = track_position;\n    }\n    if (type !== void 0) {\n      _values.type = type;\n    }\n    await _room.set({\n      info: {\n        ..._values,\n        timestamp: firebase.database.ServerValue.TIMESTAMP\n      },\n      secret\n    });\n  };\n\n  return {\n    getInfo,\n    id,\n    init,\n    wait,\n    subscribeInfo,\n    subscribeMembers,\n    unsubscribeInfo,\n    unsubscribeMembers,\n    update\n  };\n};\n\n// ------------------------------------------------------------------\n\nexport const User = (id: string, secret?: string) => {\n  const _user = USERS.child(id);\n  const _info = _user.child(\"info\");\n  let _membership: firebase.database.Reference | null = null;\n  let _values = {\n    name: \"dummy\",\n    online: false,\n    room_id: \"\",\n    status: \"\",\n    timestamp: 0\n  };\n\n  const getInfo = () => _values;\n\n  const init = async (values: Pick<UserInfo, \"name\">) => {\n    subscribeInfo((snapshot: firebase.database.DataSnapshot) => {\n      const newValues = snapshot.val();\n      if (newValues) {\n        _values = newValues;\n      }\n    });\n    await update(values);\n  };\n\n  const wait = async (): Promise<UserInfo> =>\n    new Promise((resolve, reject) => {\n      _info.once(\"value\", snapshot => {\n        const newValues = snapshot.val();\n        if (newValues) {\n          _values = newValues;\n          resolve(_values);\n        } else {\n          reject(new Error(\"User is invalid\"));\n        }\n      });\n    });\n\n  const subscribeInfo = (cb: FirebaseCB) => {\n    _info.on(\"value\", cb);\n  };\n\n  const unsubscribeInfo = (cb: FirebaseCB) => {\n    _info.off(\"value\", cb);\n  };\n\n  const update = async ({\n    name,\n    room_id\n  }: Partial<Pick<UserInfo, \"name\" | \"room_id\">>) => {\n    if (name !== void 0) {\n      _values.name = name;\n    }\n    if (room_id !== void 0) {\n      _values.room_id = room_id;\n    }\n    await _user.set({\n      info: {\n        ..._values,\n        online: true,\n        status: \"online\",\n        timestamp: firebase.database.ServerValue.TIMESTAMP\n      },\n      secret\n    });\n    installDisconnect();\n  };\n\n  const installDisconnect = () => {\n    _user.onDisconnect().cancel();\n    _user.onDisconnect().set({\n      info: {\n        ..._values,\n        online: false,\n        room_id: \"\",\n        status: \"disconnected\",\n        timestamp: firebase.database.ServerValue.TIMESTAMP\n      },\n      secret\n    });\n  };\n\n  const enter = async (room: ReturnType<typeof Room>) => {\n    if (_membership) {\n      await _membership.remove();\n      _membership = null;\n    }\n    await update({\n      room_id: room.id\n    });\n    _membership = MEMBERS.child(room.id).child(id);\n    _membership.onDisconnect().remove();\n    await _membership.set({\n      timestamp: firebase.database.ServerValue.TIMESTAMP\n    });\n  };\n\n  const exit = async () => {\n    if (_membership) {\n      await _membership.remove();\n      _membership = null;\n    }\n    await update({\n      room_id: \"\"\n    });\n  };\n\n  return {\n    id,\n    enter,\n    exit,\n    init,\n    wait,\n    subscribeInfo,\n    unsubscribeInfo,\n    update,\n    getInfo\n  };\n};\n\n// ------------------------------------------------------------------\n\nexport const Party = (id: string, room: ReturnType<typeof Room>) => {\n  const _members: string[] = [];\n  const _users: { [id: string]: ReturnType<typeof User> } = {};\n  let _info = {\n    name: \"\",\n    track_id: 0,\n    track_position: 0,\n    timestamp: 0,\n    type: \"dj\"\n  };\n\n  const _onAdded = (added: firebase.database.DataSnapshot) => {\n    const userId = added.key;\n    if (userId) {\n      const index = _members.indexOf(userId);\n      if (index === -1) {\n        _members.push(userId);\n        _users[userId] = User(userId);\n        _log();\n      }\n    }\n  };\n\n  const _onRemoved = (removed: firebase.database.DataSnapshot) => {\n    const userId = removed.key;\n    if (userId) {\n      const index = _members.indexOf(userId);\n      if (index !== -1) {\n        _members.splice(index, 1);\n        delete _users[userId];\n        _log();\n      }\n    }\n  };\n\n  const _onRoomInfo = (snapshot: firebase.database.DataSnapshot) => {\n    const newValues = snapshot.val() as RoomInfo | null;\n    if (newValues) {\n      _info = newValues;\n      _log();\n    }\n  };\n\n  const _log = () => {\n    console.log(\n      `PARTY ${id} room=${_info.name} type=${_info.type} playlist=${_info.track_id}/${_info.track_position} members=${_members}`\n    );\n  };\n\n  const init = () => {\n    room.subscribeInfo(_onRoomInfo);\n    room.subscribeMembers(_onAdded, _onRemoved);\n  };\n\n  const terminate = () => {\n    room.unsubscribeInfo(_onRoomInfo);\n    room.unsubscribeMembers(_onAdded, _onRemoved);\n  };\n\n  return {\n    init,\n    terminate\n  };\n};\n\n// ------------------------------------------------------------------\n// ------------------------------------------------------------------\n// ------------------------------------------------------------------\n\nexport const testRoom = async () => {\n  const room = Room(\"r1\", \"rs1\");\n  await room.init({ name: \"R1\" });\n  room.subscribeInfo(info => console.log(\"ROOM\", info.val()));\n  room.subscribeMembers(\n    members => console.log(\"ADDED\", members.key),\n    members => console.log(\"REMOVED\", members.key)\n  );\n  await room.init({ name: \"R1\" });\n  await sleep(1000);\n  await room.update({\n    name: \"R1b\",\n    track_id: 43,\n    track_position: 44\n  });\n};\n\nexport const testUser = async () => {\n  const user = User(\"u1\", \"us1\");\n  user.subscribeInfo(info => console.log(\"USER\", info.val()));\n  await user.init({ name: \"U1\" });\n  await sleep(1000);\n  await user.update({ name: \"U1b\" });\n};\n\nexport const testParty = async () => {\n  const room1 = Room(\"r1\", \"rs1\");\n  room1.init({ name: \"R1\" });\n  const room2 = Room(\"r2\", \"rs2\");\n  room2.init({ name: \"R2\" });\n  const user1 = User(\"u1\", \"us1\");\n  user1.init({ name: \"U1\" });\n  const user2 = User(\"u2\", \"us2\");\n  user2.init({ name: \"U2\" });\n\n  await sleep(2000);\n\n  const party1 = Party(\"P1\", room1);\n  party1.init();\n  const party2 = Party(\"P2\", room2);\n  party2.init();\n\n  await sleep(1000);\n  user1.enter(room1);\n  await sleep(1000);\n  user2.enter(room1);\n  await sleep(1000);\n  user1.enter(room2);\n  await sleep(1000);\n  user1.exit();\n  await sleep(1000);\n  user1.enter(room1);\n};\n\nexport const test = () => {\n  // testRoom();\n  // testUser();\n  // testParty();\n};\n","import { AxiosError } from \"axios\";\n//\nimport { createAction, AsyncAction } from \".\";\nimport { Container, ContainerType } from \"../utils/containers\";\nimport { displayError } from \"./messages\";\nimport { pushTracks } from \"./queue\";\nimport { loadTrack, setTracks } from \"./tracks\";\n\n// ------------------------------------------------------------------\n\nexport type ContainersAction =\n  | ReturnType<typeof fetching>\n  | ReturnType<typeof success>\n  | ReturnType<typeof error>\n  | ReturnType<typeof reset>\n  | ReturnType<typeof setContainers>;\n\nconst fetching = () => createAction(\"containers/FETCHING\");\nconst success = () => createAction(\"containers/FETCHED\");\nconst error = (error: AxiosError) => createAction(\"containers/ERROR\", error);\nconst reset = () => createAction(\"containers/RESET\");\nconst setContainers = (containers: Container[]) =>\n  createAction(\"containers/SET_CONTAINERS\", containers);\n\n// ------------------------------------------------------------------\n\nexport const loadContainer = (\n  containerType: ContainerType,\n  containerId: string,\n  enqueue: boolean,\n  play: boolean\n): AsyncAction => async (dispatch, getState, { api }) => {\n  try {\n    const state = getState();\n    const containerTypeId = `${containerType}|${containerId}`;\n    let container = state.containers.containers[containerTypeId];\n    if (!container) {\n      console.log(\"Loading container...\", { containerId, containerType });\n      switch (containerType) {\n        case \"album\":\n          container = await api.loadAlbum(containerId);\n          break;\n        case \"playlist\":\n          container = await api.loadPlaylist(containerId);\n          break;\n      }\n    }\n    if (container) {\n      dispatch(setContainers([container]));\n      if (container.tracks && container.tracks.data.length > 0) {\n        dispatch(setTracks(container.tracks.data));\n        if (enqueue) {\n          console.log(\"Enqueuing container...\");\n          dispatch(\n            pushTracks(container.tracks.data.map(track => track.id.toString()))\n          );\n        }\n        if (play) {\n          console.log(\"Playing container...\");\n          dispatch(\n            loadTrack(container.tracks.data[0].id.toString(), false, true)\n          );\n        }\n      }\n    }\n  } catch (err) {\n    dispatch(displayError(\"Cannot load container\", err));\n  }\n};\n\n// ------------------------------------------------------------------\n\nexport const previewContainer = (\n  containerType: ContainerType,\n  containerId: string\n): AsyncAction => async dispatch => {\n  console.log(\"Previewing container...\", { containerType, containerId });\n  dispatch(loadContainer(containerType, containerId, false, true));\n};\n","import { createHashHistory } from \"history\";\n\nexport default createHashHistory();\n","import { AxiosError } from \"axios\";\nimport { v4 } from \"uuid\";\n//\nimport { createAction, AsyncAction } from \".\";\nimport { displayError } from \"./messages\";\nimport { Rooms, Room } from \"../utils/rooms\";\nimport { Room as FirebaseRoom } from \"../utils/firebase\";\nimport { loadTrack } from \"./tracks\";\nimport { loadContainer } from \"./containers\";\nimport { ContainerType } from \"../utils/containers\";\nimport history from \"../utils/history\";\nimport { CombinedColor } from \"../utils/colorpicker\";\n\n// ------------------------------------------------------------------\n\nexport type RoomsAction =\n  | ReturnType<typeof fetching>\n  | ReturnType<typeof success>\n  | ReturnType<typeof error>\n  | ReturnType<typeof reset>\n  | ReturnType<typeof setRoom>\n  | ReturnType<typeof setRooms>\n  | ReturnType<typeof setRoomColor>;\n\nconst fetching = () => createAction(\"rooms/FETCHING\");\nconst success = () => createAction(\"rooms/FETCHED\");\nconst error = (error: AxiosError) => createAction(\"rooms/ERROR\", error);\nconst reset = () => createAction(\"rooms/RESET\");\nconst setRoom = (id: string) => createAction(\"rooms/SET_ROOM\", id);\nconst setRooms = (rooms: Rooms) => createAction(\"rooms/SET_ROOMS\", rooms);\nexport const setRoomColor = (color: CombinedColor) =>\n  createAction(\"rooms/SET_ROOM_COLOR\", color);\n\n// ------------------------------------------------------------------\n\nexport const createRoom = (\n  name: string,\n  secret: string\n): AsyncAction => async dispatch => {\n  try {\n    console.log(\"Creating room...\");\n    const id = v4();\n    await FirebaseRoom(id, secret).init({ name });\n    dispatch(enterRoom(id));\n  } catch (err) {\n    dispatch(displayError(\"Cannot create room\", err));\n  }\n};\n\n// ------------------------------------------------------------------\n\nlet FIREBASE_ROOM: ReturnType<typeof FirebaseRoom> | null = null;\nlet FIREBASE_CB: any = null;\n\nexport const enterRoom = (id: string): AsyncAction => async dispatch => {\n  if (!FIREBASE_ROOM || FIREBASE_ROOM.id !== id) {\n    dispatch(exitRoom());\n    try {\n      console.log(\"Entering room...\", { id });\n      const room = FirebaseRoom(id);\n      dispatch(setRooms({ [id]: await room.wait() }));\n      dispatch(setRoom(id));\n      FIREBASE_CB = (snapshot: firebase.database.DataSnapshot) => {\n        dispatch(setRooms({ [id]: snapshot.val() as Room }));\n      };\n      FIREBASE_ROOM = room;\n      FIREBASE_ROOM.subscribeInfo(FIREBASE_CB);\n      history.push(`/room/${id}`);\n    } catch (err) {\n      dispatch(displayError(\"Cannot join room\", err));\n    }\n  }\n};\n\nexport const exitRoom = (): AsyncAction => async dispatch => {\n  if (FIREBASE_ROOM) {\n    console.log(\"Exiting room...\");\n    FIREBASE_ROOM.unsubscribeInfo(FIREBASE_CB);\n    FIREBASE_ROOM = null;\n    FIREBASE_CB = null;\n    dispatch(setRoom(\"\"));\n  }\n};\n\nexport const unlockRoom = (secret: string): AsyncAction => async dispatch => {\n  console.log(\"Unlocking room...\"); // TODO\n};\n\n// ------------------------------------------------------------------\n\nexport const queueTracks = (\n  containerType: ContainerType,\n  containerId: string,\n  trackId: string\n): AsyncAction => async dispatch => {\n  console.log(\"Queuing room tracks...\", {\n    containerType,\n    containerId,\n    trackId\n  });\n  if (containerId) {\n    dispatch(loadContainer(containerType, containerId, true, false));\n  }\n  if (trackId) {\n    dispatch(loadTrack(trackId, true, false));\n  }\n};\n","import * as jimp from \"jimp\";\n\n// ------------------------------------------------------------------\n\nexport type Color = {\n  r: number;\n  g: number;\n  b: number;\n};\n\nexport type CombinedColor = {\n  bg: Color;\n  fg: Color;\n};\n\nconst CACHE: { [url: string]: CombinedColor } = {};\n\n// ------------------------------------------------------------------\n\nexport const pickColor = async (url: string) => {\n  let value = CACHE[url];\n  if (!value) {\n    const image = await jimp.read(url);\n    const pixel = await image.resize(1, 1).getPixelColor(0, 0);\n    const bg = jimp.intToRGBA(pixel);\n    // https://stackoverflow.com/questions/3942878/how-to-decide-font-color-in-white-or-black-depending-on-background-color\n    CACHE[url] = value = {\n      bg,\n      fg:\n        bg.r * 0.299 + bg.g * 0.587 + bg.b * 0.114 > 186\n          ? { r: 0, g: 0, b: 0 }\n          : { r: 255, g: 255, b: 255 }\n    };\n  }\n  return value;\n};\n\n/*\nconst backgroundColor = color\n? `rgb(${color.r}, ${color.g}, ${color.b})`\n: void 0;\n<div\nstyle={{\n  backgroundColor\n}}\n>\nx\n</div>\n\ncolors: {\n  [id: string]: {\n    r: number;\n    g: number;\n    b: number;\n    a: number;\n  };\n};,\ncolors: {}\nconst color = this.state.colors[album.id];\n\nimport { pickColor } from \"../../utils/colorpicker\";\n\nprivate XXX = async (id: number, url: string) => {\n  if (!this.state.colors[id]) {\n    const color = await pickColor(url);\n    this.setState({\n      colors: { ...this.state.colors, [id]: color }\n    });\n  }\n};\n*/\n","import { AsyncAction, createAction } from \".\";\nimport { setTracks } from \"./tracks\";\nimport { displayError } from \"./messages\";\nimport { setRoomColor } from \"./rooms\";\nimport { pickColor } from \"../utils/colorpicker\";\n\n// ------------------------------------------------------------------\n\nexport type PlayerAction =\n  | ReturnType<typeof reset>\n  | ReturnType<typeof start>\n  | ReturnType<typeof stop>;\n\nconst reset = () => createAction(\"player/RESET\");\n\nconst start = () => createAction(\"player/START\");\n\nconst stop = () => createAction(\"player/STOP\");\n\n// ------------------------------------------------------------------\n\nlet PLAYER_TIMER: NodeJS.Timeout | null = null;\nlet PLAYER_POSITION = -1;\n\nexport const startPlayer = (): AsyncAction => async (\n  dispatch,\n  getState,\n  { queuePlayer }\n) => {\n  if (!PLAYER_TIMER) {\n    PLAYER_TIMER = setInterval(async () => {\n      const {\n        queue: { position, trackIds },\n        tracks\n      } = getState();\n      // console.log(\"TESTING\", { position, PLAYER_POSITION, COUNT: trackIds.length });\n      if (\n        position !== PLAYER_POSITION &&\n        position >= 0 &&\n        position < trackIds.length\n      ) {\n        console.log(\"PLAYING\", { position });\n        PLAYER_POSITION = position;\n        const track = tracks.tracks[trackIds[position]];\n        await queuePlayer.play(track.preview, 0);\n        dispatch(setRoomColor(await pickColor(track.album.cover_small)));\n      }\n    }, 1000);\n    dispatch(start());\n  }\n};\n\n// ------------------------------------------------------------------\n\nexport const stopPlayer = (): AsyncAction => async (\n  dispatch,\n  _,\n  { queuePlayer }\n) => {\n  if (PLAYER_TIMER) {\n    clearInterval(PLAYER_TIMER);\n    PLAYER_TIMER = null;\n    PLAYER_POSITION = -1;\n\n    queuePlayer.stop();\n    dispatch(stop());\n  }\n};\n\n// ------------------------------------------------------------------\n\nexport const startPreview = (trackId: string): AsyncAction => async (\n  dispatch,\n  getState,\n  { api, previewPlayer }\n) => {\n  try {\n    const state = getState();\n    let track = state.tracks.tracks[trackId];\n    if (!track) {\n      console.log(\"Loading track...\", { trackId });\n      track = await api.loadTrack(trackId);\n      dispatch(setTracks([track]));\n    }\n    console.log(\"Start previewing...\");\n    await previewPlayer.play(track.preview, 0);\n  } catch (err) {\n    dispatch(displayError(\"Cannot load track\", err));\n  }\n};\n\n// ------------------------------------------------------------------\n\nexport const stopPreview = (): AsyncAction => async (\n  _1,\n  _2,\n  { previewPlayer }\n) => {\n  console.log(\"Stop previewing...\");\n  previewPlayer.stop();\n};\n","import { createAction } from \".\";\n\n// ------------------------------------------------------------------\n\nexport type ModalPrereqT<T extends string, P> = {\n  type: T;\n  props: P;\n};\n\nexport type ModalPrereq =\n  | ModalPrereqT<\"ConnectUser\", null>\n  | ModalPrereqT<\"CreateRoom\", null>\n  | ModalPrereqT<\"CreateUser\", null>\n  | ModalPrereqT<\"Search\", null>\n  | ModalPrereqT<\"UnlockRoom\", null>;\n\n// ------------------------------------------------------------------\n\nexport type ModalsAction =\n  | ReturnType<typeof closeModal>\n  | ReturnType<typeof openModal>\n  | ReturnType<typeof popModal>\n  | ReturnType<typeof pushModal>;\n\n// ------------------------------------------------------------------\n\nexport const openModal = (prereq: ModalPrereq) =>\n  createAction(\"modals/OPEN\", prereq);\n\nexport const closeModal = () => createAction(\"modals/CLOSE\");\n\n// ------------------------------------------------------------------\n\nexport const pushModal = (prereq: ModalPrereq) =>\n  createAction(\"modals/PUSH\", prereq);\n\nexport const popModal = () => createAction(\"modals/POP\");\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../../reducers\";\nimport Controls from \"../../components/Room/Controls\";\nimport { startPlayer, stopPlayer } from \"../../actions/player\";\nimport { openModal } from \"../../actions/modals\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState) => ({\n  playing: state.player.playing\n});\n\nconst dispatchToProps = (dispatch: ThunkDispatch<RootState, any, any>) => ({\n  onPlay: () => dispatch(startPlayer()),\n  onSearch: () => dispatch(openModal({ type: \"Search\", props: null })),\n  onStop: () => dispatch(stopPlayer())\n});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(Controls);\n","import React from \"react\";\n//\nimport { ApiAlbum, ApiPlaylist, ApiTrack } from \"../../utils/api\";\nimport \"./Metas.scss\";\n\n// ------------------------------------------------------------------\n\nexport const AlbumMeta = ({ album }: { album: ApiAlbum }) => (\n  <div className=\"Metas\">\n    <div className=\"Meta AlbumTitle\">\n      <a href={album.link} target=\"_blank\" rel=\"noopener noreferrer\">\n        {album.title}\n      </a>\n    </div>\n    <div className=\"Meta AlbumArtistName\">\n      by{\" \"}\n      <a href={album.artist.link} target=\"_blank\" rel=\"noopener noreferrer\">\n        {album.artist.name}\n      </a>\n    </div>\n  </div>\n);\n\nexport const PlaylistMeta = ({ playlist }: { playlist: ApiPlaylist }) => (\n  <div className=\"Metas\">\n    <div className=\"Meta PlaylistTitle\">\n      <a href={playlist.link} target=\"_blank\" rel=\"noopener noreferrer\">\n        {playlist.title}\n      </a>\n    </div>\n  </div>\n);\n\nexport const TrackMeta = ({ track }: { track: ApiTrack }) => (\n  <div className=\"Metas\">\n    <div className=\"Meta TrackTitle\">\n      <a href={track.link} target=\"_blank\" rel=\"noopener noreferrer\">\n        {track.title}\n      </a>\n    </div>\n    <div className=\"Meta TrackArtistName\">\n      by{\" \"}\n      <a href={track.artist.link} target=\"_blank\" rel=\"noopener noreferrer\">\n        {track.artist.name}\n      </a>\n    </div>\n  </div>\n);\n","import React from \"react\";\nimport classNames from \"classnames\";\n//\nimport Icon from \"../Common/Icon\";\nimport \"./Cover.scss\";\n\nexport const Cover = ({\n  playing,\n  image,\n  onPlay,\n  onStop\n}: {\n  image: string;\n  onPlay: () => void;\n  onStop: () => void;\n  playing: boolean;\n}) => (\n  <div\n    className={classNames(\"Cover\", { playing })}\n    style={{ backgroundImage: `url('${image}')` }}\n    onClick={!playing ? onPlay : onStop}\n  >\n    {!playing ? (\n      <Icon icon=\"play\" title=\"Play\" />\n    ) : (\n      <Icon icon=\"pause\" title=\"Stop\" />\n    )}\n  </div>\n);\n","import React, { Component } from \"react\";\n//\nimport { MappedProps } from \"../../containers/Room/Queue\";\nimport { TrackMeta } from \"./Metas\";\nimport { Cover } from \"./Cover\";\n\n// ------------------------------------------------------------------\n\nclass Queue extends Component<MappedProps> {\n  public render = () => {\n    const { playing, playingPosition, tracks, onPlay, onStop } = this.props;\n    return (\n      <div className=\"Queue\">\n        {tracks.map((track, index) => (\n          <div className=\"QueueItem\" key={track.id}>\n            <Cover\n              image={track.album.cover_small}\n              playing={playing && playingPosition === index}\n              onPlay={() => onPlay(index)}\n              onStop={onStop}\n            />\n            <TrackMeta track={track} />\n          </div>\n        ))}\n      </div>\n    );\n  };\n}\n\nexport default Queue;\n","import { RootState } from \"../reducers\";\nimport { ApiTrack } from \"../utils/api\";\n\nexport const extractTracks = (state: RootState, trackIds: string[]) => {\n  const res: Array<ApiTrack> = [];\n  const {\n    tracks: { tracks }\n  } = state;\n  for (const trackId of trackIds) {\n    const track = tracks[trackId];\n    if (!!track) {\n      res.push(track);\n    }\n  }\n  return res;\n};\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../../reducers\";\nimport Queue from \"../../components/Room/Queue\";\nimport { extractTracks } from \"../../selectors/tracks\";\nimport { setPosition } from \"../../actions/queue\";\nimport { stopPlayer, startPlayer } from \"../../actions/player\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState) => ({\n  playing: state.player.playing,\n  playingPosition: state.queue.position,\n  tracks: extractTracks(state, state.queue.trackIds)\n});\n\nconst dispatchToProps = (dispatch: ThunkDispatch<RootState, any, any>) => ({\n  onPlay: (index: number) => {\n    dispatch(startPlayer());\n    dispatch(setPosition(index));\n  },\n  onStop: () => dispatch(stopPlayer())\n});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(Queue);\n","import React, { Component, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n//\nimport IconButton from \"../Common/IconButton\";\nimport { MappedProps } from \"../../containers/App/Menu\";\n\n// ------------------------------------------------------------------\n\nclass Menu extends Component<MappedProps> {\n  public render = () => {\n    const { user, onCreateRoom, onDisconnectUser, onConnectUser } = this.props;\n    return (\n      <Fragment>\n        <div className=\"Logo\">\n          <Link to=\"/\">Logo</Link>\n        </div>\n        <div className=\"Menu\">\n          {!!user ? (\n            <Fragment>\n              <div className=\"MenuItem\">\n                <IconButton\n                  title=\"Create Room\"\n                  icon=\"plus\"\n                  onClick={onCreateRoom}\n                />\n              </div>\n              <div className=\"MenuItem\">\n                <IconButton\n                  title={`Disconnect (${user.name})`}\n                  icon=\"sign-out\"\n                  onClick={onDisconnectUser}\n                />\n              </div>\n            </Fragment>\n          ) : (\n            <Fragment>\n              <div className=\"MenuItem\">\n                <IconButton\n                  title=\"Connect\"\n                  icon=\"sign-in\"\n                  onClick={onConnectUser}\n                />\n              </div>\n            </Fragment>\n          )}\n        </div>\n      </Fragment>\n    );\n  };\n}\n\nexport default Menu;\n","import { AxiosError } from \"axios\";\nimport { createAction, AsyncAction } from \".\";\nimport { Users, User } from \"../utils/users\";\nimport { User as FirebaseUser } from \"../utils/firebase\";\nimport { v4 } from \"uuid\";\nimport { displayError } from \"./messages\";\n\n// ------------------------------------------------------------------\n\nexport type UsersAction =\n  | ReturnType<typeof fetching>\n  | ReturnType<typeof success>\n  | ReturnType<typeof error>\n  | ReturnType<typeof reset>\n  | ReturnType<typeof setUser>\n  | ReturnType<typeof setUsers>;\n\nconst fetching = () => createAction(\"users/FETCHING\");\nconst success = () => createAction(\"users/FETCHED\");\nconst error = (error: AxiosError) => createAction(\"users/ERROR\", error);\nconst reset = () => createAction(\"users/RESET\");\nconst setUser = (id: string, secret: string) =>\n  createAction(\"users/SET_USER\", { id, secret });\nconst setUsers = (users: Users) => createAction(\"users/SET_USERS\", users);\n\n// ------------------------------------------------------------------\n\nexport const createUser = (\n  name: string,\n  secret: string\n): AsyncAction => async dispatch => {\n  try {\n    console.log(\"Creating user...\");\n    const id = v4();\n    await FirebaseUser(id, secret).init({ name });\n    dispatch(connectUser(id, secret));\n  } catch (err) {\n    dispatch(displayError(\"Cannot create user\", err));\n  }\n};\n\n// ------------------------------------------------------------------\n\nlet FIREBASE_USER: ReturnType<typeof FirebaseUser> | null = null;\nlet FIREBASE_CB: any = null;\n\nexport const connectUser = (\n  id: string,\n  secret: string\n): AsyncAction => async dispatch => {\n  dispatch(disconnectUser());\n  try {\n    console.log(\"Connection user...\", { id, secret });\n    const user = FirebaseUser(id);\n    dispatch(setUsers({ [id]: await user.wait() }));\n    dispatch(setUser(id, secret));\n    FIREBASE_CB = (snapshot: firebase.database.DataSnapshot) => {\n      dispatch(setUsers({ [id]: snapshot.val() as User }));\n    };\n    FIREBASE_USER = user;\n    FIREBASE_USER.subscribeInfo(FIREBASE_CB);\n  } catch (err) {\n    dispatch(displayError(\"Cannot connect user\", err));\n  }\n};\n\nexport const disconnectUser = (): AsyncAction => async dispatch => {\n  if (FIREBASE_USER) {\n    console.log(\"Disconnecting user...\");\n    FIREBASE_USER.unsubscribeInfo(FIREBASE_CB);\n    FIREBASE_USER = null;\n    FIREBASE_CB = null;\n    dispatch(setUser(\"\", \"\"));\n  }\n};\n\nexport const reconnectUser = (): AsyncAction => async (dispatch, getState) => {\n  const state = getState();\n  const { id, secret } = state.users.user;\n  if (id && secret) {\n    try {\n      console.log(\"Loading user...\");\n      dispatch(connectUser(id, secret));\n    } catch (err) {\n      dispatch(displayError(\"Cannot load user\", err));\n    }\n  }\n};\n","import { RootState } from \"../reducers\";\nimport { User } from \"../utils/users\";\n\nexport const extractUser = (state: RootState, id: string): User | null => {\n  const user = state.users.users[id];\n  if (!user) {\n    return null;\n  }\n  return user;\n};\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../../reducers\";\nimport { openModal } from \"../../actions/modals\";\nimport Menu from \"../../components/App/Menu\";\nimport { disconnectUser } from \"../../actions/users\";\nimport { extractUser } from \"../../selectors/users\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState) => ({\n  user: extractUser(state, state.users.user.id)\n});\n\nconst dispatchToProps = (dispatch: ThunkDispatch<RootState, any, any>) => ({\n  onCreateRoom: () => dispatch(openModal({ type: \"CreateRoom\", props: null })),\n  onConnectUser: () =>\n    dispatch(openModal({ type: \"ConnectUser\", props: null })),\n  onDisconnectUser: () => dispatch(disconnectUser())\n});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(Menu);\n","import React, { Component } from \"react\";\n//\nimport Menu from \"../../containers/App/Menu\";\nimport { createSharingUrl, Room } from \"../../utils/rooms\";\n\n// ------------------------------------------------------------------\n\nexport type Props = {\n  room: Room | null;\n  roomId: string;\n};\n\nclass Head extends Component<Props> {\n  public render = () => {\n    const { room, roomId } = this.props;\n    return (\n      <div className=\"Head\">\n        <Menu />\n        <a className=\"RoomLink\" href={createSharingUrl(roomId)}>\n          {room ? room.name : \"?\"}\n        </a>\n      </div>\n    );\n  };\n}\n\nexport default Head;\n","export type Room = {\n  name: string;\n  timestamp: number;\n  track_id: number;\n  track_position: number;\n  type: string;\n};\n\nexport type Rooms = { [id: string]: Room };\n\nexport const createSharingUrl = (id: string) =>\n  `${window.location.origin}/#/room/${id}`;\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n//\nimport { MappedProps } from \"../../containers/Room\";\nimport Controls from \"../../containers/Room/Controls\";\nimport Queue from \"../../containers/Room/Queue\";\nimport Head from \"./Head\";\nimport \"./index.scss\";\n\n// ------------------------------------------------------------------\n\nexport type Props = RouteComponentProps<{\n  room_id: string;\n}>;\n\nclass Room extends Component<Props & MappedProps> {\n  public componentDidMount = () => {\n    this.props.onEnter();\n  };\n\n  public componentWillUnmount = () => {\n    this.props.onExit();\n  };\n\n  public render = () => {\n    const {\n      match: {\n        params: { room_id }\n      },\n      room,\n      roomColor: { fg, bg }\n    } = this.props;\n    return (\n      <div\n        className=\"Room\"\n        style={{\n          color: `rgb(${fg.r}, ${fg.g}, ${fg.b})`,\n          backgroundColor: `rgb(${bg.r}, ${bg.g}, ${bg.b})`\n        }}\n      >\n        <Head room={room} roomId={room_id} />\n        <Queue />\n        <Controls />\n      </div>\n    );\n  };\n}\n\nexport default withRouter(Room);\n","import { RootState } from \"../reducers\";\nimport { Room } from \"../utils/rooms\";\n\nexport const extractRoom = (state: RootState, id: string): Room | null => {\n  const room = state.rooms.rooms[id];\n  if (!room) {\n    return null;\n  }\n  return room;\n};\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../../reducers\";\nimport Room, { Props } from \"../../components/Room\";\nimport { enterRoom, exitRoom } from \"../../actions/rooms\";\nimport { extractRoom } from \"../../selectors/rooms\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState, ownProps: Props) => ({\n  room: extractRoom(state, ownProps.match.params.room_id),\n  roomColor: state.rooms.room_color\n});\n\nconst dispatchToProps = (\n  dispatch: ThunkDispatch<RootState, any, any>,\n  ownProps: Props\n) => ({\n  onEnter: () => dispatch(enterRoom(ownProps.match.params.room_id)),\n  onExit: () => dispatch(exitRoom())\n});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(Room);\n","import React, { Component } from \"react\";\n//\nimport { MappedProps } from \"../../containers/Splash\";\nimport Menu from \"../../containers/App/Menu\";\nimport \"./index.scss\";\n\n// ------------------------------------------------------------------\n\nclass Splash extends Component<MappedProps> {\n  public componentDidMount = async () => {};\n\n  public render = () => {\n    return (\n      <div className=\"Splash\">\n        <Menu />\n      </div>\n    );\n  };\n}\n\nexport default Splash;\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../../reducers\";\nimport Splash from \"../../components/Splash\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState) => ({});\n\nconst dispatchToProps = (dispatch: ThunkDispatch<RootState, any, any>) => ({});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(Splash);\n","import React, { Component, FormEvent, ReactNode } from \"react\";\nimport classNames from \"classnames\";\n//\nimport { MappedProps } from \"../../containers/Modals/Modal\";\nimport IconButton from \"../Common/IconButton\";\n\n// ------------------------------------------------------------------\n\ntype Props = {\n  children: ReactNode;\n  className?: string;\n  title: string;\n  renderFoot?: () => React.ReactNode;\n  onSubmit?: () => void;\n};\n\nclass Modal extends Component<Props & MappedProps> {\n  public render = () => {\n    const {\n      children,\n      className,\n      title,\n      renderFoot,\n      onClose,\n      onPop,\n      has_prev_modal\n    } = this.props;\n    return (\n      <form className={classNames(\"Modal\", className)} onSubmit={this.onSubmit}>\n        <div className=\"ModalHead\">\n          <IconButton\n            kind=\"special\"\n            className={classNames(\"ModalHeadBack\", {\n              hidden: !has_prev_modal\n            })}\n            icon=\"angle-left\"\n            title=\"Back\"\n            onClick={onPop}\n          />\n          <div className=\"ModalTitle\">{title}</div>\n          <IconButton\n            kind=\"special\"\n            className=\"ModalHeadClose\"\n            onClick={onClose}\n            title=\"Cancel\"\n            icon=\"times\"\n          />\n        </div>\n        <div className=\"ModalBody\">{children}</div>\n        <div className=\"ModalFoot\">{renderFoot && renderFoot()}</div>\n      </form>\n    );\n  };\n\n  private onSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (this.props.onSubmit) {\n      this.props.onSubmit();\n    }\n  };\n}\n\nexport default Modal;\n","import { connect } from \"react-redux\";\n//\nimport Modal from \"../../components/Modals/Modal\";\nimport { RootState } from \"../../reducers\";\nimport { popModal } from \"../../actions/modals\";\n\n// ------------------------------------------------------------------\n\nconst mapStateToProps = (state: RootState) => ({\n  has_prev_modal: state.modals.stack.length > 1\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  onClose: () => dispatch(popModal()),\n  onPop: () => dispatch(popModal())\n});\n\nexport type MappedProps = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal);\n","import React, { Component } from \"react\";\nimport classNames from \"classnames\";\n//\nimport Modal from \"../../containers/Modals/Modal\";\nimport \"./FormModal.scss\";\n\n// ------------------------------------------------------------------\n\ntype Props = {\n  className?: string;\n  onSubmit: () => void;\n  renderButtons: () => React.ReactNode;\n  title: string;\n};\n\nclass FormModal extends Component<Props> {\n  public render = () => {\n    const { children, className, renderButtons, title, onSubmit } = this.props;\n    return (\n      <Modal\n        className={classNames(\"FormModal\", className)}\n        title={title}\n        renderFoot={renderButtons}\n        onSubmit={onSubmit}\n      >\n        {children}\n      </Modal>\n    );\n  };\n}\n\nexport default FormModal;\n","import React, { Component, Fragment, RefObject, createRef } from \"react\";\n//\nimport FormModal from \"../Modals/FormModal\";\nimport { MappedProps } from \"../../containers/Users/ConnectUserModal\";\nimport IconButton, { CancelButton } from \"../Common/IconButton\";\n\n// ------------------------------------------------------------------\n\ntype State = {\n  id: string;\n  secret: string;\n};\n\nclass ConnectUserModal extends Component<MappedProps, State> {\n  private idRef: RefObject<HTMLInputElement> = createRef();\n\n  public readonly state: State = {\n    id: \"\",\n    secret: \"\"\n  };\n\n  public componentDidMount() {\n    if (this.idRef.current) {\n      this.idRef.current.focus();\n    }\n  }\n\n  public render = () => {\n    const { id, secret } = this.state;\n    return (\n      <FormModal\n        title=\"Connect User\"\n        onSubmit={this.onConnect}\n        renderButtons={this.renderButtons}\n      >\n        <div className=\"ModalField\">\n          <label htmlFor=\"modal-id\">User ID</label>\n          <input\n            id=\"modal-id\"\n            type=\"text\"\n            placeholder=\"User ID...\"\n            maxLength={36}\n            minLength={36}\n            required={true}\n            value={id}\n            ref={this.idRef}\n            onChange={e => {\n              this.setState({ id: e.target.value });\n            }}\n          />\n        </div>\n        <div className=\"ModalField\">\n          <label htmlFor=\"modal-secret\">User Secret</label>\n          <input\n            id=\"modal-secret\"\n            type=\"text\"\n            placeholder=\"User Secret...\"\n            maxLength={200}\n            minLength={8}\n            required={true}\n            value={secret}\n            onChange={e => {\n              this.setState({ secret: e.target.value });\n            }}\n          />\n        </div>\n      </FormModal>\n    );\n  };\n\n  private renderButtons = () => (\n    <Fragment>\n      <IconButton title=\"Connect\" kind=\"primary\" icon=\"sign-in\" type=\"submit\" />\n      <CancelButton onClick={this.props.onClose} />\n      <IconButton\n        title=\"Create\"\n        kind=\"default\"\n        icon=\"plus\"\n        onClick={this.props.onToggle}\n      />\n    </Fragment>\n  );\n\n  private onConnect = () => {\n    const { onClose, onConnect, onError } = this.props;\n    const { id, secret } = this.state;\n    if (id.trim().length === 0) {\n      onError(\"User ID is invalid\");\n      return;\n    }\n    if (secret.trim().length === 0) {\n      onError(\"User secret is invalid\");\n      return;\n    }\n    onConnect(id, secret);\n    onClose();\n  };\n}\n\nexport default ConnectUserModal;\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../../reducers\";\nimport ConnectUserModal from \"../../components/Users/ConnectUserModal\";\nimport { connectUser } from \"../../actions/users\";\nimport { popModal, openModal } from \"../../actions/modals\";\nimport { displayError } from \"../../actions/messages\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState) => {\n  return {};\n};\n\nconst dispatchToProps = (dispatch: ThunkDispatch<RootState, any, any>) => ({\n  onClose: () => dispatch(popModal()),\n  onConnect: (id: string, secret: string) => dispatch(connectUser(id, secret)),\n  onError: (message: string) => dispatch(displayError(message)),\n  onToggle: () => dispatch(openModal({ type: \"CreateUser\", props: null }))\n});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(ConnectUserModal);\n","import React, { Component, Fragment, RefObject, createRef } from \"react\";\nimport { v4 } from \"uuid\";\n//\nimport FormModal from \"../Modals/FormModal\";\nimport { MappedProps } from \"../../containers/Room/CreateRoomModal\";\nimport IconButton, { CancelButton } from \"../Common/IconButton\";\n\n// ------------------------------------------------------------------\n\ntype State = {\n  name: string;\n  secret: string;\n};\n\nclass CreateRoomModal extends Component<MappedProps, State> {\n  private nameRef: RefObject<HTMLInputElement> = createRef();\n\n  public readonly state: State = {\n    name: \"\",\n    secret: v4()\n  };\n\n  public componentDidMount() {\n    if (this.nameRef.current) {\n      this.nameRef.current.focus();\n    }\n  }\n\n  public render = () => {\n    const { name, secret } = this.state;\n    return (\n      <FormModal\n        title=\"Create Room\"\n        onSubmit={this.onCreate}\n        renderButtons={this.renderButtons}\n      >\n        <div className=\"ModalField\">\n          <label htmlFor=\"modal-name\">Room Name</label>\n          <input\n            id=\"modal-name\"\n            type=\"text\"\n            placeholder=\"Room Name...\"\n            maxLength={20}\n            minLength={2}\n            required={true}\n            value={name}\n            ref={this.nameRef}\n            onChange={e => {\n              this.setState({ name: e.target.value });\n            }}\n          />\n        </div>\n        <div className=\"ModalField\">\n          <label htmlFor=\"modal-secret\">Room Secret</label>\n          <input\n            id=\"modal-secret\"\n            type=\"text\"\n            placeholder=\"Room Secret...\"\n            maxLength={200}\n            minLength={8}\n            required={true}\n            value={secret}\n            onChange={e => {\n              this.setState({ secret: e.target.value });\n            }}\n          />\n        </div>\n      </FormModal>\n    );\n  };\n\n  private renderButtons = () => (\n    <Fragment>\n      <IconButton title=\"Create\" kind=\"primary\" icon=\"plus\" type=\"submit\" />\n      <CancelButton onClick={this.props.onClose} />\n    </Fragment>\n  );\n\n  private onCreate = () => {\n    const { onClose, onCreate, onError } = this.props;\n    const { name, secret } = this.state;\n    if (name.trim().length === 0) {\n      onError(\"Room name is invalid\");\n      return;\n    }\n    if (secret.trim().length === 0) {\n      onError(\"Room secret is invalid\");\n      return;\n    }\n    onCreate(name, secret);\n    onClose();\n  };\n}\n\nexport default CreateRoomModal;\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../../reducers\";\nimport CreateRoomModal from \"../../components/Room/CreateRoomModal\";\nimport { createRoom } from \"../../actions/rooms\";\nimport { popModal } from \"../../actions/modals\";\nimport { displayError } from \"../../actions/messages\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState) => {\n  return {};\n};\n\nconst dispatchToProps = (dispatch: ThunkDispatch<RootState, any, any>) => ({\n  onClose: () => dispatch(popModal()),\n  onCreate: (name: string, secret: string) =>\n    dispatch(createRoom(name, secret)),\n  onError: (message: string) => dispatch(displayError(message))\n});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(CreateRoomModal);\n","import React, { Component, Fragment, RefObject, createRef } from \"react\";\nimport { v4 } from \"uuid\";\n//\nimport FormModal from \"../Modals/FormModal\";\nimport { MappedProps } from \"../../containers/Users/CreateUserModal\";\nimport IconButton, { CancelButton } from \"../Common/IconButton\";\n\n// ------------------------------------------------------------------\n\ntype State = {\n  name: string;\n  secret: string;\n};\n\nclass CreateUserModal extends Component<MappedProps, State> {\n  private nameRef: RefObject<HTMLInputElement> = createRef();\n\n  public readonly state: State = {\n    name: \"\",\n    secret: v4()\n  };\n\n  public componentDidMount() {\n    if (this.nameRef.current) {\n      this.nameRef.current.focus();\n    }\n  }\n\n  public render = () => {\n    const { name, secret } = this.state;\n    return (\n      <FormModal\n        title=\"Create User\"\n        onSubmit={this.onCreate}\n        renderButtons={this.renderButtons}\n      >\n        <div className=\"ModalField\">\n          <label htmlFor=\"modal-name\">User Name</label>\n          <input\n            id=\"modal-name\"\n            type=\"text\"\n            placeholder=\"User Name...\"\n            maxLength={20}\n            minLength={2}\n            required={true}\n            value={name}\n            ref={this.nameRef}\n            onChange={e => {\n              this.setState({ name: e.target.value });\n            }}\n          />\n        </div>\n        <div className=\"ModalField\">\n          <label htmlFor=\"modal-secret\">User Secret</label>\n          <input\n            id=\"modal-secret\"\n            type=\"text\"\n            placeholder=\"User Secret...\"\n            maxLength={200}\n            minLength={8}\n            required={true}\n            value={secret}\n            onChange={e => {\n              this.setState({ secret: e.target.value });\n            }}\n          />\n        </div>\n      </FormModal>\n    );\n  };\n\n  private renderButtons = () => (\n    <Fragment>\n      <IconButton title=\"Create\" kind=\"primary\" icon=\"plus\" type=\"submit\" />\n      <CancelButton onClick={this.props.onClose} />\n      <IconButton\n        title=\"Connect\"\n        kind=\"default\"\n        icon=\"sign-in\"\n        onClick={this.props.onToggle}\n      />\n    </Fragment>\n  );\n\n  private onCreate = () => {\n    const { onClose, onCreate, onError } = this.props;\n    const { name, secret } = this.state;\n    if (name.trim().length === 0) {\n      onError(\"User name is invalid\");\n      return;\n    }\n    if (secret.trim().length === 0) {\n      onError(\"User secret is invalid\");\n      return;\n    }\n    onCreate(name, secret);\n    onClose();\n  };\n}\n\nexport default CreateUserModal;\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../../reducers\";\nimport CreateUserModal from \"../../components/Users/CreateUserModal\";\nimport { createUser } from \"../../actions/users\";\nimport { popModal, openModal } from \"../../actions/modals\";\nimport { displayError } from \"../../actions/messages\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState) => {\n  return {};\n};\n\nconst dispatchToProps = (dispatch: ThunkDispatch<RootState, any, any>) => ({\n  onClose: () => dispatch(popModal()),\n  onCreate: (name: string, secret: string) =>\n    dispatch(createUser(name, secret)),\n  onError: (message: string) => dispatch(displayError(message)),\n  onToggle: () => dispatch(openModal({ type: \"ConnectUser\", props: null }))\n});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(CreateUserModal);\n","// import Axios from \"axios\";\nimport jsonp from \"jsonp\";\n\n// ------------------------------------------------------------------\n\ntype SearchResult<T> = {\n  data: T[];\n  total: number;\n};\n\nexport type SearchAllResults = {\n  albums: SearchResult<ApiAlbum>;\n  playlists: SearchResult<ApiPlaylist>;\n  tracks: SearchResult<ApiTrack>;\n};\n\nexport type ApiAlbum = {\n  artist: {\n    id: number;\n    name: string;\n    link: string;\n    picture_big: string;\n    picture_small: string;\n  };\n  available: boolean;\n  cover_big: string;\n  cover_small: string;\n  id: number;\n  link: string;\n  nb_tracks: number;\n  title: string;\n  tracks?: { data: ApiTrack[] };\n  type: \"album\";\n};\n\nexport type ApiPlaylist = {\n  description: string;\n  id: number;\n  link: string;\n  nb_tracks: number;\n  picture_big: string;\n  picture_small: string;\n  public: true;\n  title: string;\n  tracks?: { data: ApiTrack[] };\n  type: \"playlist\";\n};\n\nexport type ApiTrack = {\n  album: {\n    id: number;\n    title: string;\n    cover_big: string;\n    cover_small: string;\n  };\n  artist: {\n    id: number;\n    name: string;\n    link: string;\n    picture_big: string;\n    picture_small: string;\n  };\n  duration: number;\n  id: number;\n  link: string;\n  preview: string;\n  readable: boolean;\n  title: string;\n  type: \"track\";\n};\n\n// ------------------------------------------------------------------\n\nexport const Api = () => {\n  const API_BASE = \"https://api.deezer.com\";\n\n  const asyncJsonp = <T>(url: string): Promise<T> =>\n    new Promise((resolve, reject) => {\n      jsonp(url, void 0, (err, data) => {\n        if (err) {\n          reject(new Error(err.message));\n        } else {\n          resolve(data);\n        }\n      });\n    });\n\n  const call = async <T>(path: string, qs?: string) => {\n    // We have to rely on jsonp because the Deezer api is CORS restricted\n    const fullpath = qs\n      ? `${API_BASE}/${path}?${qs}&output=jsonp&callback=`\n      : `${API_BASE}/${path}?output=jsonp&callback=`;\n    return await asyncJsonp<T>(fullpath);\n  };\n\n  const search = <T>(type: string, query: string) =>\n    call<SearchResult<T>>(`search/${type}`, `q=${encodeURIComponent(query)}`);\n\n  const load = <T>(type: string, id: string) => call<T>(`/${type}/${id}`);\n\n  const searchAlbums = (query: string) => search<ApiAlbum>(\"album\", query);\n\n  const searchPlaylists = (query: string) =>\n    search<ApiPlaylist>(\"playlist\", query);\n\n  const searchTracks = (query: string) => search<ApiTrack>(\"track\", query);\n\n  const searchAll = async (query: string): Promise<SearchAllResults> => {\n    const [albums, playlists, tracks] = await Promise.all([\n      searchAlbums(query),\n      searchPlaylists(query),\n      searchTracks(query)\n    ]);\n    return { albums, playlists, tracks };\n  };\n\n  const loadAlbum = async (id: string) => {\n    const album = await load<ApiAlbum>(\"album\", id);\n    album.tracks!.data.forEach(track => (track.album = album));\n    return album;\n  };\n\n  const loadPlaylist = (id: string) => load<ApiPlaylist>(\"playlist\", id);\n\n  const loadTrack = (id: string) => load<ApiTrack>(\"track\", id);\n\n  return {\n    searchAll,\n    loadAlbum,\n    loadPlaylist,\n    loadTrack\n  };\n};\n\n// ------------------------------------------------------------------\n\nexport const DEFAULT_API = Api();\n","import React, {\n  Component,\n  Fragment,\n  createRef,\n  RefObject,\n  ReactNode\n} from \"react\";\nimport classNames from \"classnames\";\n//\nimport FormModal from \"../Modals/FormModal\";\nimport { MappedProps } from \"../../containers/Room/SearchModal\";\nimport IconButton, { CancelButton } from \"../Common/IconButton\";\nimport { DEFAULT_API, SearchAllResults } from \"../../utils/api\";\nimport { TrackMeta, PlaylistMeta, AlbumMeta } from \"./Metas\";\nimport \"./SearchModal.scss\";\nimport { Cover } from \"./Cover\";\nimport { ContainerType } from \"../../utils/containers\";\n\n// ------------------------------------------------------------------\n\nconst MAX_RESULTS_COUNT = 5;\n\nfunction SearchResult<T extends { id: number }>({\n  items,\n  label,\n  type,\n  cb\n}: {\n  items: T[];\n  label: string;\n  type: string;\n  cb: (item: T) => ReactNode;\n}) {\n  return items.length > 0 ? (\n    <Fragment>\n      <div className=\"SearchResult\">\n        <div className=\"SearchResultLabel\">{label}</div>\n        <div className=\"SearchResultItems\">\n          {items.slice(0, MAX_RESULTS_COUNT).map(item => (\n            <div key={item.id} className={classNames(\"SearchResultItem\", type)}>\n              {cb(item)}\n            </div>\n          ))}\n        </div>\n      </div>\n    </Fragment>\n  ) : null;\n}\n\n// ------------------------------------------------------------------\n\ntype State = {\n  playingId: number;\n  playingType: ContainerType | \"track\";\n  query: string;\n  results: SearchAllResults;\n};\n\nclass SearchModal extends Component<MappedProps, State> {\n  private queryRef: RefObject<HTMLInputElement> = createRef();\n\n  public readonly state: State = {\n    playingId: 0,\n    playingType: \"track\",\n    query: \"\",\n    results: {\n      albums: { data: [], total: 0 },\n      playlists: { data: [], total: 0 },\n      tracks: { data: [], total: 0 }\n    }\n  };\n\n  public componentDidMount() {\n    if (this.queryRef.current) {\n      this.queryRef.current.focus();\n    }\n  }\n\n  public componentWillUnmount() {\n    this.props.onStopPreview();\n  }\n\n  public render = () => (\n    <FormModal\n      title=\"Search\"\n      onSubmit={this.onSearch}\n      renderButtons={this.renderButtons}\n    >\n      {this.renderInputs()}\n      {this.renderResults()}\n    </FormModal>\n  );\n\n  private renderButtons = () => (\n    <Fragment>\n      <IconButton title=\"Search\" kind=\"primary\" icon=\"search\" type=\"submit\" />\n      <CancelButton onClick={this.props.onClose} />\n    </Fragment>\n  );\n\n  private renderInputs = () => {\n    const { query } = this.state;\n    return (\n      <div className=\"ModalField\">\n        <label htmlFor=\"modal-query\">Query</label>\n        <input\n          id=\"modal-query\"\n          type=\"text\"\n          placeholder=\"Query...\"\n          maxLength={100}\n          minLength={2}\n          required={true}\n          value={query}\n          ref={this.queryRef}\n          onChange={e => {\n            this.setState({ query: e.target.value });\n          }}\n        />\n      </div>\n    );\n  };\n\n  private renderResults = () => {\n    const { onSelectContainer, onSelectTrack } = this.props;\n    const {\n      playingId,\n      playingType,\n      results: { albums, playlists, tracks }\n    } = this.state;\n    return (\n      <Fragment>\n        <SearchResult\n          label={`Albums`}\n          type=\"Album\"\n          items={albums.data}\n          cb={album => {\n            return (\n              <Fragment>\n                <IconButton\n                  title=\"Add\"\n                  icon=\"plus\"\n                  onClick={() =>\n                    onSelectContainer(\"album\", album.id.toString())\n                  }\n                />\n                <Cover\n                  playing={playingType === \"album\" && playingId === album.id}\n                  image={album.cover_small}\n                  onPlay={() => this.onPreviewContainer(\"album\", album.id)}\n                  onStop={() => this.onStopPreview()}\n                />\n                <AlbumMeta album={album} />\n              </Fragment>\n            );\n          }}\n        />\n        <SearchResult\n          label={`Playlists`}\n          type=\"Playlist\"\n          items={playlists.data}\n          cb={playlist => (\n            <Fragment>\n              <IconButton\n                title=\"Add\"\n                icon=\"plus\"\n                onClick={() =>\n                  onSelectContainer(\"playlist\", playlist.id.toString())\n                }\n              />\n              <Cover\n                playing={\n                  playingType === \"playlist\" && playingId === playlist.id\n                }\n                image={playlist.picture_small}\n                onPlay={() => this.onPreviewContainer(\"playlist\", playlist.id)}\n                onStop={() => this.onStopPreview()}\n              />\n              <PlaylistMeta playlist={playlist} />\n            </Fragment>\n          )}\n        />\n        <SearchResult\n          label={`Tracks`}\n          type=\"Track\"\n          items={tracks.data}\n          cb={track => (\n            <Fragment>\n              <IconButton\n                title=\"Add\"\n                icon=\"plus\"\n                onClick={() => onSelectTrack(track.id.toString())}\n              />\n              <Cover\n                playing={playingType === \"track\" && playingId === track.id}\n                image={track.album.cover_small}\n                onPlay={() => this.onPreviewTrack(track.id)}\n                onStop={() => this.onStopPreview()}\n              />\n              <TrackMeta track={track} />\n            </Fragment>\n          )}\n        />\n      </Fragment>\n    );\n  };\n\n  private onSearch = async () => {\n    const { query } = this.state;\n    if (query.trim().length > 0) {\n      this.setState({ results: await DEFAULT_API.searchAll(query) });\n    }\n  };\n\n  private onPreviewContainer = (\n    containerType: ContainerType,\n    containerId: number\n  ) => {\n    this.props.onPreviewContainer(containerType, containerId.toString());\n    this.setState({\n      playingId: containerId,\n      playingType: containerType\n    });\n  };\n\n  private onPreviewTrack = (trackId: number) => {\n    this.props.onPreviewTrack(trackId.toString());\n    this.setState({\n      playingId: trackId,\n      playingType: \"track\"\n    });\n  };\n\n  private onStopPreview = () => {\n    this.props.onStopPreview();\n    this.setState({\n      playingId: 0,\n      playingType: \"track\"\n    });\n  };\n}\n\nexport default SearchModal;\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../../reducers\";\nimport SearchModal from \"../../components/Room/SearchModal\";\nimport { popModal } from \"../../actions/modals\";\nimport { previewContainer } from \"../../actions/containers\";\nimport { queueTracks } from \"../../actions/rooms\";\nimport { startPreview, stopPreview } from \"../../actions/player\";\nimport { ContainerType } from \"../../utils/containers\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState) => {\n  return {};\n};\n\nconst dispatchToProps = (dispatch: ThunkDispatch<RootState, any, any>) => ({\n  onClose: () => dispatch(popModal()),\n  onPreviewContainer: (containerType: ContainerType, containerId: string) =>\n    dispatch(previewContainer(containerType, containerId)),\n  onPreviewTrack: (trackId: string) => dispatch(startPreview(trackId)),\n  onStopPreview: () => dispatch(stopPreview()),\n  onSelectContainer: (containerType: ContainerType, containerId: string) =>\n    dispatch(queueTracks(containerType, containerId, \"\")),\n  onSelectTrack: (trackId: string) =>\n    dispatch(queueTracks(\"album\", \"\", trackId))\n});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(SearchModal);\n","import React, { Component, Fragment, createRef, RefObject } from \"react\";\n//\nimport FormModal from \"../Modals/FormModal\";\nimport { MappedProps } from \"../../containers/Room/UnlockRoomModal\";\nimport IconButton, { CancelButton } from \"../Common/IconButton\";\n\n// ------------------------------------------------------------------\n\ntype State = {\n  secret: string;\n};\n\nclass UnlockRoomModal extends Component<MappedProps, State> {\n  private secretRef: RefObject<HTMLInputElement> = createRef();\n\n  public readonly state: State = {\n    secret: \"\"\n  };\n\n  public componentDidMount() {\n    if (this.secretRef.current) {\n      this.secretRef.current.focus();\n    }\n  }\n\n  public render = () => {\n    const { secret } = this.state;\n    return (\n      <FormModal\n        title=\"Join Room\"\n        onSubmit={this.onJoin}\n        renderButtons={this.renderButtons}\n      >\n        <div className=\"ModalField\">\n          <label htmlFor=\"modal-secret\">Room Secret</label>\n          <input\n            id=\"modal-secret\"\n            type=\"text\"\n            placeholder=\"Room Secret...\"\n            maxLength={36}\n            minLength={36}\n            required={true}\n            value={secret}\n            ref={this.secretRef}\n            onChange={e => {\n              this.setState({ secret: e.target.value });\n            }}\n          />\n        </div>\n      </FormModal>\n    );\n  };\n\n  private renderButtons = () => (\n    <Fragment>\n      <IconButton title=\"Join\" kind=\"primary\" icon=\"sign-in\" type=\"submit\" />\n      <CancelButton onClick={this.props.onClose} />\n    </Fragment>\n  );\n\n  private onJoin = () => {\n    const { onClose, onUnlock } = this.props;\n    onUnlock(this.state.secret);\n    onClose();\n  };\n}\n\nexport default UnlockRoomModal;\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../../reducers\";\nimport UnlockRoomModal from \"../../components/Room/UnlockRoomModal\";\nimport { unlockRoom } from \"../../actions/rooms\";\nimport { popModal } from \"../../actions/modals\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState) => {\n  return {};\n};\n\nconst dispatchToProps = (dispatch: ThunkDispatch<RootState, any, any>) => ({\n  onClose: () => dispatch(popModal()),\n  onUnlock: (secret: string) => dispatch(unlockRoom(secret))\n});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(UnlockRoomModal);\n","import React, { Component, MouseEvent } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n//\nimport { MappedProps } from \"../../containers/Modals\";\nimport { ModalPrereq } from \"../../actions/modals\";\nimport ConnectUserModal from \"../../containers/Users/ConnectUserModal\";\nimport CreateRoomModal from \"../../containers/Room/CreateRoomModal\";\nimport CreateUserModal from \"../../containers/Users/CreateUserModal\";\nimport SearchModal from \"../../containers/Room/SearchModal\";\nimport UnlockRoomModal from \"../../containers/Room/UnlockRoomModal\";\nimport \"./index.scss\";\n\n// ------------------------------------------------------------------\n\nconst TransitionTimeout = 300;\n\n// ------------------------------------------------------------------\n\nexport const getModal = (prereq: ModalPrereq) => {\n  switch (prereq.type) {\n    case \"ConnectUser\":\n      return <ConnectUserModal />;\n    case \"CreateRoom\":\n      return <CreateRoomModal />;\n    case \"CreateUser\":\n      return <CreateUserModal />;\n    case \"Search\":\n      return <SearchModal />;\n    case \"UnlockRoom\":\n      return <UnlockRoomModal />;\n  }\n};\n\n// ------------------------------------------------------------------\n\ntype State = {\n  curr_prereq?: ModalPrereq;\n  prev_prereq?: ModalPrereq; // Keeping prev modal prereq for modal fadeout\n};\n\nclass Modals extends Component<MappedProps, State> {\n  public readonly state: State = {\n    curr_prereq: void 0,\n    prev_prereq: void 0\n  };\n\n  public componentDidMount = () => {\n    document.addEventListener(\"keydown\", this.onKeyDown);\n  };\n\n  public componentWillUnmount = () => {\n    document.removeEventListener(\"keydown\", this.onKeyDown);\n  };\n\n  public componentDidUpdate = (prevProps: MappedProps) => {\n    const oldPrereq = prevProps.prereq;\n    const newPrereq = this.props.prereq;\n    if (oldPrereq !== newPrereq) {\n      // Hide current modal before showing new one (if there is a new one)\n      this.setState(\n        {\n          curr_prereq: void 0,\n          prev_prereq: oldPrereq\n        },\n        () => {\n          if (newPrereq) {\n            setTimeout(() => {\n              this.setState({\n                curr_prereq: newPrereq\n              });\n            }, TransitionTimeout);\n          }\n        }\n      );\n    }\n  };\n\n  public render = () => {\n    const { curr_prereq, prev_prereq } = this.state;\n    const prereq = curr_prereq || prev_prereq;\n    let modal = null;\n    if (prereq) {\n      modal = getModal(prereq);\n    }\n    return (\n      <CSSTransition\n        in={!!curr_prereq}\n        timeout={TransitionTimeout}\n        unmountOnExit={true}\n      >\n        <div className=\"ModalOverlay\" onClick={this.onClickOverlay}>\n          {modal && (\n            <div\n              className=\"ModalWrapper\"\n              role=\"dialog\"\n              onClick={this.onClickWrapper}\n            >\n              {modal}\n            </div>\n          )}\n        </div>\n      </CSSTransition>\n    );\n  };\n\n  private onClickOverlay = (event: MouseEvent) => {\n    // Clicking overlay will close current modal\n    event.stopPropagation();\n    this.props.onCloseModal();\n  };\n\n  private onClickWrapper = (event: MouseEvent) => {\n    // Clicking wrapper modal will not progagate to overlay which would close current modal\n    event.stopPropagation();\n  };\n\n  private onKeyDown = (e: KeyboardEvent) => {\n    if (e.keyCode === 27) {\n      this.props.onCloseModal();\n    }\n  };\n}\n\nexport default Modals;\n","import { connect } from \"react-redux\";\n//\nimport Modals from \"../../components/Modals\";\nimport { RootState } from \"../../reducers\";\nimport { popModal } from \"../../actions/modals\";\n\n// ------------------------------------------------------------------\n\nconst mapStateToProps = (state: RootState) => ({\n  prereq:\n    state.modals.stack.length > 0\n      ? state.modals.stack[state.modals.stack.length - 1]\n      : void 0\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  onCloseModal: () => dispatch(popModal())\n});\n\nexport type MappedProps = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Modals);\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n//\nimport { Message } from \"../../actions/messages\";\nimport \"./Messages.scss\";\n\n// ------------------------------------------------------------------\n\ntype Props = {\n  messages: Message[];\n};\n\nclass Messages extends React.Component<Props> {\n  public render = () => (\n    <div className=\"Messages\">\n      <TransitionGroup>\n        {this.props.messages.map(message => this.renderMessage(message))}\n      </TransitionGroup>\n    </div>\n  );\n\n  public renderMessage(message: Message) {\n    return (\n      <CSSTransition\n        key={message.id}\n        classNames=\"Message\"\n        timeout={{ enter: 200, exit: 200 }}\n      >\n        <div className={classNames(\"Message\", \"Message-\" + message.type)}>\n          {message.text}\n        </div>\n      </CSSTransition>\n    );\n  }\n}\n\nexport default Messages;\n","import { connect } from \"react-redux\";\n//\nimport { RootState } from \"../../reducers\";\nimport Messages from \"../../components/App/Messages\";\n\n// ------------------------------------------------------------------\n\nexport type MappedProps = ReturnType<typeof mapStateToProps>;\n\nconst mapStateToProps = (state: RootState) => ({\n  messages: state.messages\n});\n\nexport default connect(mapStateToProps)(Messages);\n","import React, { Component } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\n//\nimport { MappedProps } from \"../../containers/App\";\nimport Room from \"../../containers/Room\";\nimport Splash from \"../../containers/Splash\";\nimport Modals from \"../../containers/Modals\";\nimport Messages from \"../../containers/App/Messages\";\nimport \"./index.scss\";\n\n// ------------------------------------------------------------------\n\nclass App extends Component<MappedProps> {\n  public componentDidMount = async () => {\n    this.props.onReconnect();\n  };\n\n  public render = () => {\n    return (\n      <div className=\"App\">\n        <Modals />\n        <Switch>\n          <Route exact={true} path=\"/room/:room_id\" component={Room} />\n          <Route exact={true} path=\"/\" component={Splash} />\n          <Redirect to=\"/\" />\n        </Switch>\n        <Messages />\n      </div>\n    );\n  };\n}\n\nexport default App;\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../../reducers\";\nimport App from \"../../components/App\";\nimport { reconnectUser } from \"../../actions/users\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState) => ({});\n\nconst dispatchToProps = (dispatch: ThunkDispatch<RootState, any, any>) => ({\n  onReconnect: () => dispatch(reconnectUser())\n});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(App);\n","// ------------------------------------------------------------------\n\nlet AUDIO_CONTEXT: AudioContext | null = null;\n\nconst getContext = () => {\n  if (!AUDIO_CONTEXT) {\n    AUDIO_CONTEXT = new (window.AudioContext ||\n      (window as any).webkitAudioContext)();\n  }\n  return AUDIO_CONTEXT;\n};\n\nconst decodeAudioData = (encodedBuffer: ArrayBuffer): Promise<AudioBuffer> =>\n  new Promise((resolve, reject) =>\n    getContext().decodeAudioData(encodedBuffer, resolve, reject)\n  );\n\n// ------------------------------------------------------------------\n\n// Fix Safari and iOS Audio Context\n(() => {\n  const fixAudioContext = () => {\n    document.removeEventListener(\"click\", fixAudioContext);\n    document.removeEventListener(\"touchstart\", fixAudioContext);\n    console.log(\"Fixing audio context...\");\n    const context = getContext();\n    // Create empty buffer, connect to output, play sound\n    var buffer = context.createBuffer(1, 1, 22050);\n    var source = context.createBufferSource();\n    source.buffer = buffer;\n    source.connect(context.destination);\n    source.start(0);\n  };\n  document.addEventListener(\"click\", fixAudioContext);\n  document.addEventListener(\"touchstart\", fixAudioContext);\n})();\n\n// ------------------------------------------------------------------\n\nexport type PlayerCallbacks = {\n  onStart: () => void;\n  onStop: () => void;\n};\n\nexport const Player = () => {\n  let analyserNode: AnalyserNode | null = null;\n  let gainNode: GainNode | null = null;\n  let node: AudioNode | null = null;\n\n  const getNode = () => {\n    if (!node) {\n      const context = getContext();\n      node = context.destination;\n\n      gainNode = context.createGain();\n      gainNode.gain.value = 1.0;\n      gainNode.connect(node);\n      node = gainNode;\n\n      analyserNode = context.createAnalyser();\n      analyserNode.fftSize = 128;\n      // analyserNode.minDecibels = -90;\n      // analyserNode.maxDecibels = -10;\n      analyserNode.connect(node);\n      node = analyserNode;\n    }\n    return node;\n  };\n\n  let buffer: AudioBuffer | null = null;\n  let bufferUrl: string = \"\";\n\n  let sourceNode: AudioBufferSourceNode | null = null;\n  let playCount = 0;\n\n  const isPlaying = () => playCount > 0;\n\n  const loadAudioBuffer = (url: string): Promise<AudioBuffer> =>\n    new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.open(\"GET\", url, true);\n      req.responseType = \"arraybuffer\";\n      req.addEventListener(\n        \"error\",\n        () => reject(new Error(\"Audio buffer loading failed\")),\n        false\n      );\n      req.addEventListener(\n        \"load\",\n        async () => {\n          try {\n            resolve(await decodeAudioData(req.response as ArrayBuffer));\n          } catch (error) {\n            console.log(\"An error occurred while decoding audio data\");\n            reject(error);\n          }\n        },\n        false\n      );\n      req.send();\n    });\n\n  const play = async (url: string, offset: number) => {\n    if (bufferUrl !== url) {\n      console.log(\"Loading audio...\", { url });\n      buffer = await loadAudioBuffer(url);\n      bufferUrl = url;\n    }\n    stop();\n    playCount++;\n    console.log(\"Starting audio...\");\n    sourceNode = getContext().createBufferSource();\n    sourceNode.buffer = buffer;\n    sourceNode.loop = false;\n    sourceNode.loopStart = 0;\n    sourceNode.loopEnd = 0;\n    sourceNode.onended = () => {\n      console.log(\"Audio terminated...\");\n      playCount--;\n    };\n    sourceNode.playbackRate.value = 1.0;\n    sourceNode.connect(getNode());\n    sourceNode.start(0, offset); // A new BufferSource must be created for each start\n  };\n\n  const stop = () => {\n    if (null !== sourceNode) {\n      console.log(\"Stopping audio...\");\n      sourceNode.stop();\n      sourceNode = null;\n    }\n  };\n\n  return {\n    analyserNode,\n    gainNode,\n    isPlaying,\n    play,\n    stop\n  };\n};\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { Route, HashRouter } from \"react-router-dom\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { applyMiddleware, createStore, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n//\nimport { rootReducer } from \"./reducers\";\nimport App from \"./containers/App\";\nimport { DEFAULT_API } from \"./utils/api\";\nimport { Player } from \"./utils/player\";\nimport \"./index.scss\";\n\n// ------------------------------------------------------------------\n\nconst composeEnhancers =\n  process.env.NODE_ENV === \"development\" ? composeWithDevTools({}) : compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(\n    applyMiddleware(\n      thunk.withExtraArgument({\n        api: DEFAULT_API,\n        queuePlayer: Player(),\n        previewPlayer: Player()\n      })\n    )\n  )\n);\n\n// ------------------------------------------------------------------\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <Route path=\"/\" component={App} />\n    </HashRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}