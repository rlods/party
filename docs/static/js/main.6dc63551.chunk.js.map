{"version":3,"sources":["reducers/containers.ts","reducers/messages.ts","reducers/modals.ts","reducers/rooms.ts","reducers/tracks.ts","reducers/users.ts","utils/users.ts","reducers/index.ts","actions/index.ts","actions/modals.ts","components/Common/Icon.tsx","components/Common/IconButton.tsx","components/Menu.tsx","config/firebase.ts","utils/index.ts","utils/firebase.ts","actions/messages.ts","actions/users.ts","selectors/users.ts","containers/Menu.ts","components/Rooms/Room.tsx","utils/rooms.ts","utils/history.ts","actions/rooms.ts","selectors/rooms.ts","containers/Rooms/Room.ts","components/Splash/index.tsx","containers/Splash/index.ts","components/Modals/Modal.tsx","containers/Modals/Modal.ts","components/Modals/FormModal.tsx","components/Rooms/CreateRoomModal.tsx","containers/Rooms/CreateRoomModal.ts","components/Users/ConnectUserModal.tsx","containers/Users/ConnectUserModal.ts","components/Rooms/JoinRoomModal.tsx","containers/Rooms/JoinRoomModal.ts","components/Modals/index.tsx","containers/Modals/index.ts","components/Messages.tsx","containers/Messages.ts","components/App.tsx","containers/App.ts","index.tsx"],"names":["INITIAL_STATE","fetching","error","containers","initialState","stack","room_id","rooms","tracks","user","res","id","secret","s","localStorage","getItem","d","JSON","parse","atob","i","console","log","err","load","users","rootReducer","combineReducers","state","action","type","payload","messages","filter","other","modals","copy","pop","setItem","btoa","stringify","save","createAction","openModal","prereq","popModal","Icon","Component","render","this","props","className","icon","title","classNames","name","IconButton","kind","onClick","aria-label","clickable","CancelButton","Menu","to","createRoom","enterRoom","disconnectUser","connectUser","config","databaseURL","process","firebaseApp","firebase","firebaseConfig","firebaseDatabase","MEMBERS","ref","ROOMS","USERS","Room","_room","child","_info","_members","_values","container_id","container_type","timestamp","track_id","track_position","init","values","a","subscribeInfo","snapshot","newValues","val","update","wait","Promise","resolve","reject","once","Error","cb","on","set","info","ServerValue","TIMESTAMP","getInfo","subscribeMembers","cbAdded","cbRemoved","unsubscribeInfo","off","unsubscribeMembers","User","_user","_membership","online","status","installDisconnect","onDisconnect","cancel","enter","room","remove","exit","MESSAGE_ID_GENERATOR","displayMessage","text","duration","dispatch","setTimeout","removeMessage","displayError","response","data","message","setUser","setUsers","createUser","v4","FirebaseUser","FIREBASE_USER","FIREBASE_CB","reconnectUser","getState","extractUser","connect","componentDidMount","onEnter","componentWillUnmount","onExit","match","params","window","location","origin","withRouter","createHashHistory","setRoom","setRooms","FirebaseRoom","FIREBASE_ROOM","exitRoom","history","push","extractRoom","ownProps","Splash","Modal","children","renderFoot","onClose","onPop","has_prev_modal","onSubmit","hidden","event","preventDefault","length","FormModal","renderButtons","CreateRoomModal","nameRef","createRef","onCreate","htmlFor","placeholder","value","onChange","e","setState","target","onError","trim","current","focus","ConnectUserModal","JoinRoomModal","idRef","roomId","onJoin","Modals","curr_prereq","prev_prereq","document","addEventListener","onKeyDown","removeEventListener","componentDidUpdate","prevProps","oldPrereq","newPrereq","modal","getModal","in","timeout","unmountOnExit","onClickOverlay","role","onClickWrapper","stopPropagation","onCloseModal","keyCode","Messages","React","map","renderMessage","key","App","onReconnect","exact","path","component","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.6dc63551.chunk.js","sourcesContent":["import { Reducer } from \"redux\";\nimport { AxiosError } from \"axios\";\nimport { ContainersAction } from \"../actions/containers\";\nimport { Containers } from \"../utils/containers\";\n\nexport type State = {\n  fetching: boolean;\n  error: null | AxiosError;\n  containers: Containers;\n};\n\nconst INITIAL_STATE: State = {\n  fetching: false,\n  error: null,\n  containers: {}\n};\n\nexport const containersReducer: Reducer<State, ContainersAction> = (\n  state = INITIAL_STATE,\n  action: ContainersAction\n): State => {\n  switch (action.type) {\n    case \"containers/FETCHING\":\n      return {\n        ...state,\n        fetching: true,\n        error: null\n      };\n    case \"containers/FETCHED\": {\n      return {\n        ...state,\n        fetching: false,\n        error: null\n      };\n    }\n    case \"containers/ERROR\":\n      return {\n        ...state,\n        fetching: false,\n        error: action.payload\n      };\n    case \"containers/SET_CONTAINERS\": {\n      return {\n        ...state,\n        containers: { ...state.containers, ...action.payload }\n      };\n    }\n    case \"containers/RESET\":\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n","import { Reducer } from \"redux\";\nimport { Message, MessagesAction } from \"../actions/messages\";\n\n// ------------------------------------------------------------------\n\nexport type State = Message[];\n\nexport const initialState: State = [];\n\nexport const messagesReducer: Reducer<State, MessagesAction> = (\n  state = initialState,\n  action\n): State => {\n  switch (action.type) {\n    case \"message/ADD\":\n      return [action.payload, ...state];\n    case \"message/REMOVE\":\n      return state.filter(other => other.id !== action.payload);\n    default:\n      return state;\n  }\n};\n","import { Reducer } from \"redux\";\nimport { ModalsAction, ModalPrereq } from \"../actions/modals\";\n\n// ------------------------------------------------------------------\n\nexport type ModalsState = {\n  stack: ModalPrereq[];\n};\n\n// ------------------------------------------------------------------\n\nexport const initialState: ModalsState = {\n  stack: []\n};\n\n// ------------------------------------------------------------------\n\nexport const modalsReducer: Reducer<ModalsState, ModalsAction> = (\n  state = initialState,\n  action\n): ModalsState => {\n  switch (action.type) {\n    case \"modals/OPEN\":\n      return {\n        ...state,\n        stack: [action.payload]\n      };\n    case \"modals/CLOSE\":\n      return {\n        ...state,\n        stack: []\n      };\n    case \"modals/PUSH\":\n      return {\n        ...state,\n        stack: [...state.stack, action.payload]\n      };\n    case \"modals/POP\":\n      const copy = [...state.stack];\n      copy.pop();\n      return {\n        ...state,\n        stack: copy\n      };\n    default:\n      return state;\n  }\n};\n","import { Reducer } from \"redux\";\nimport { AxiosError } from \"axios\";\nimport { RoomsAction } from \"../actions/rooms\";\nimport { Rooms } from \"../utils/rooms\";\n\nexport type State = {\n  fetching: boolean;\n  error: null | AxiosError;\n  room_id: string;\n  rooms: Rooms;\n};\n\nconst INITIAL_STATE: State = {\n  fetching: false,\n  error: null,\n  room_id: \"\",\n  rooms: {}\n};\n\nexport const roomsReducer: Reducer<State, RoomsAction> = (\n  state = INITIAL_STATE,\n  action: RoomsAction\n): State => {\n  switch (action.type) {\n    case \"rooms/FETCHING\":\n      return {\n        ...state,\n        fetching: true,\n        error: null\n      };\n    case \"rooms/FETCHED\": {\n      return {\n        ...state,\n        fetching: false,\n        error: null\n      };\n    }\n    case \"rooms/ERROR\":\n      return {\n        ...state,\n        fetching: false,\n        error: action.payload\n      };\n    case \"rooms/SET_ROOM\": {\n      return {\n        ...state,\n        room_id: action.payload\n      };\n    }\n    case \"rooms/SET_ROOMS\": {\n      return {\n        ...state,\n        rooms: { ...state.rooms, ...action.payload }\n      };\n    }\n    case \"rooms/RESET\":\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n","import { Reducer } from \"redux\";\nimport { AxiosError } from \"axios\";\nimport { TracksAction } from \"../actions/tracks\";\nimport { Tracks } from \"../utils/tracks\";\n\nexport type State = {\n  fetching: boolean;\n  error: null | AxiosError;\n  tracks: Tracks;\n};\n\nconst INITIAL_STATE: State = {\n  fetching: false,\n  error: null,\n  tracks: {}\n};\n\nexport const tracksReducer: Reducer<State, TracksAction> = (\n  state = INITIAL_STATE,\n  action: TracksAction\n): State => {\n  switch (action.type) {\n    case \"tracks/FETCHING\":\n      return {\n        ...state,\n        fetching: true,\n        error: null\n      };\n    case \"tracks/FETCHED\": {\n      return {\n        ...state,\n        fetching: false,\n        error: null\n      };\n    }\n    case \"tracks/ERROR\":\n      return {\n        ...state,\n        fetching: false,\n        error: action.payload\n      };\n    case \"tracks/SET_TRACKS\": {\n      return {\n        ...state,\n        tracks: { ...state.tracks, ...action.payload }\n      };\n    }\n    case \"tracks/RESET\":\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n","import { Reducer } from \"redux\";\nimport { AxiosError } from \"axios\";\nimport { UsersAction } from \"../actions/users\";\nimport { Users, save, load, XXX } from \"../utils/users\";\n\n// ------------------------------------------------------------------\n\nexport type State = {\n  fetching: boolean;\n  error: null | AxiosError;\n  user: XXX;\n  users: Users;\n};\n\nconst INITIAL_STATE: State = {\n  fetching: false,\n  error: null,\n  user: load(),\n  users: {}\n};\n\n// ------------------------------------------------------------------\n\nexport const usersReducer: Reducer<State, UsersAction> = (\n  state = INITIAL_STATE,\n  action: UsersAction\n): State => {\n  switch (action.type) {\n    case \"users/FETCHING\":\n      return {\n        ...state,\n        fetching: true,\n        error: null\n      };\n    case \"users/FETCHED\": {\n      return {\n        ...state,\n        fetching: false,\n        error: null\n      };\n    }\n    case \"users/ERROR\":\n      return {\n        ...state,\n        fetching: false,\n        error: action.payload\n      };\n    case \"users/SET_USER\": {\n      save(action.payload);\n      return {\n        ...state,\n        user: { ...action.payload }\n      };\n    }\n    case \"users/SET_USERS\": {\n      return {\n        ...state,\n        users: { ...state.users, ...action.payload }\n      };\n    }\n    case \"users/RESET\":\n      return INITIAL_STATE;\n    default:\n      return state;\n  }\n};\n","export type User = {\n  name: string;\n  online: boolean;\n  room_id: string;\n  status: string;\n  timestamp: number;\n};\n\nexport type Users = { [id: string]: User };\n\n// ------------------------------------------------------------------\n\nexport type XXX = {\n  id: string;\n  secret: string;\n};\n\nexport const load = (): XXX => {\n  const res: XXX = {\n    id: \"\",\n    secret: \"\"\n  };\n  const s = localStorage.getItem(\"U\");\n  if (s) {\n    try {\n      const d = JSON.parse(atob(s));\n      if (typeof d.i === \"string\" && typeof d.s === \"string\") {\n        res.id = d.i;\n        res.secret = d.s;\n        console.log(\"LOADED: \", res);\n      }\n    } catch (err) {}\n  }\n  return res;\n};\n\nexport const save = ({ id, secret }: XXX) => {\n  localStorage.setItem(\n    \"U\",\n    btoa(\n      JSON.stringify({\n        i: id,\n        s: secret\n      })\n    )\n  );\n};\n","import { combineReducers } from \"redux\";\nimport { containersReducer as containers } from \"./containers\";\nimport { messagesReducer as messages } from \"./messages\";\nimport { modalsReducer as modals } from \"./modals\";\nimport { roomsReducer as rooms } from \"./rooms\";\nimport { tracksReducer as tracks } from \"./tracks\";\nimport { usersReducer as users } from \"./users\";\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const rootReducer = combineReducers({\n  containers,\n  messages,\n  modals,\n  rooms,\n  tracks,\n  users\n});\n","import { AnyAction } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { RootState } from \"../reducers\";\n\n// ------------------------------------------------------------------\n\nexport type Action<T extends string> = {\n  type: T;\n};\n\nexport type ActionWithPayload<T extends string, P> = {\n  type: T;\n  payload: P;\n};\n\nexport type AsyncAction = ThunkAction<void, RootState, void, AnyAction>;\n\nexport function createAction<T extends string>(type: T): Action<T>;\n\nexport function createAction<T extends string, P>(\n  type: T,\n  payload: P\n): ActionWithPayload<T, P>;\n\nexport function createAction<T extends string, P>(type: T, payload?: P) {\n  return payload === void 0 ? { type } : { type, payload };\n}\n","import { createAction } from \".\";\n\n// ------------------------------------------------------------------\n\nexport type ModalPrereqT<T extends string, P> = {\n  type: T;\n  props: P;\n};\n\nexport type ModalPrereq =\n  | ModalPrereqT<\"CreateRoom\", null>\n  | ModalPrereqT<\"JoinRoom\", null>\n  | ModalPrereqT<\"ConnectUser\", null>;\n\n// ------------------------------------------------------------------\n\nexport type ModalsAction =\n  | ReturnType<typeof closeModal>\n  | ReturnType<typeof openModal>\n  | ReturnType<typeof popModal>\n  | ReturnType<typeof pushModal>;\n\n// ------------------------------------------------------------------\n\nexport const openModal = (prereq: ModalPrereq) =>\n  createAction(\"modals/OPEN\", prereq);\n\nexport const closeModal = () => createAction(\"modals/CLOSE\");\n\n// ------------------------------------------------------------------\n\nexport const pushModal = (prereq: ModalPrereq) =>\n  createAction(\"modals/PUSH\", prereq);\n\nexport const popModal = () => createAction(\"modals/POP\");\n","import React, { Component } from \"react\";\nimport FontAwesome from \"react-fontawesome\";\nimport classNames from \"classnames\";\n//\nimport \"./Icon.scss\";\n\n// ------------------------------------------------------------------\n\nexport type Props = {\n  className?: string;\n  icon: string;\n  title?: string;\n};\n\nclass Icon extends Component<Props> {\n  public render = () => {\n    const { className, icon, title } = this.props;\n    return (\n      <FontAwesome\n        className={classNames(\"Icon\", className)}\n        name={icon}\n        title={title}\n      />\n    );\n  };\n}\n\nexport default Icon;\n","import React, { Component } from \"react\";\nimport classNames from \"classnames\";\n//\nimport Icon from \"./Icon\";\nimport \"./IconButton.scss\";\n\n// ------------------------------------------------------------------\n\ntype ButtonType = \"button\" | \"submit\";\n\nexport type Props = {\n  className?: string;\n  icon: string;\n  kind?: \"default\" | \"primary\" | \"danger\" | \"special\";\n  onClick?: () => void;\n  title: string;\n  type?: ButtonType;\n};\n\nclass IconButton extends Component<Props> {\n  public render = () => {\n    const {\n      className,\n      icon,\n      kind = \"default\",\n      onClick,\n      title,\n      type = \"button\"\n    } = this.props;\n    return (\n      <button\n        type={type}\n        aria-label={title}\n        className={classNames(\"IconButton\", className, kind, {\n          clickable: !!onClick || type === \"submit\"\n        })}\n        onClick={onClick}\n        title={title}\n      >\n        <Icon icon={icon} />\n      </button>\n    );\n  };\n}\n\nexport const CancelButton = ({ onClick }: { onClick: () => void }) => (\n  <IconButton onClick={onClick} title=\"Cancel\" kind=\"default\" icon=\"ban\" />\n);\n\nexport default IconButton;\n","import React, { Component, Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n//\nimport IconButton from \"./Common/IconButton\";\nimport { MappedProps } from \"../containers/Menu\";\n\n// ------------------------------------------------------------------\n\nclass Menu extends Component<MappedProps> {\n  public render = () => {\n    const { user } = this.props;\n    return (\n      <div className=\"Menu\">\n        <div>\n          <Link to=\"/\">Home</Link>\n        </div>\n        {!!user ? (\n          <Fragment>\n            <div>\n              <IconButton\n                title=\"Create Room\"\n                icon=\"plus\"\n                onClick={this.props.createRoom}\n              />\n            </div>\n            <div>\n              <IconButton\n                title=\"Join Room\"\n                icon=\"folder-open\"\n                onClick={this.props.enterRoom}\n              />\n            </div>\n            <div>\n              <IconButton\n                title=\"Disconnect\"\n                icon=\"sign-out\"\n                onClick={this.props.disconnectUser}\n              />\n              {user.name}\n            </div>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <div>\n              <IconButton\n                title=\"Connect\"\n                icon=\"sign-in\"\n                onClick={this.props.connectUser}\n              />\n            </div>\n          </Fragment>\n        )}\n      </div>\n    );\n  };\n}\n\nexport default Menu;\n","const config = {\n  databaseURL: process.env.REACT_APP_FIREBASE_URL\n};\n\nconsole.log(config);\n\nexport default config;\n","export const sleep = (delay: number) =>\n  new Promise(resolve => setTimeout(resolve, delay));\n","import * as firebase from \"firebase/app\";\nimport \"firebase/database\";\n//\nimport firebaseConfig from \"../config/firebase\";\nimport { Room as RoomInfo } from \"./rooms\";\nimport { User as UserInfo } from \"./users\";\nimport { sleep } from \".\";\n\n// ------------------------------------------------------------------\n\ntype FirebaseCB = (eventType: firebase.database.DataSnapshot) => void;\n\n// ------------------------------------------------------------------\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst firebaseDatabase = firebase.database(firebaseApp);\n\n// ------------------------------------------------------------------\n\nconst MEMBERS = firebaseDatabase.ref(\"members\");\nconst ROOMS = firebaseDatabase.ref(\"rooms\");\nconst USERS = firebaseDatabase.ref(\"users\");\n\n// ------------------------------------------------------------------\n\nexport const Room = (id: string, secret?: string) => {\n  const _room = ROOMS.child(id);\n  const _info = _room.child(\"info\");\n  const _members = MEMBERS.child(id);\n  let _values: RoomInfo = {\n    container_id: \"\",\n    container_type: \"\",\n    name: \"dummy\",\n    timestamp: 0,\n    track_id: 0,\n    track_position: 0,\n    type: \"dj\"\n  };\n\n  const getInfo = () => _values;\n\n  const init = async (values: Pick<RoomInfo, \"name\">) => {\n    subscribeInfo((snapshot: firebase.database.DataSnapshot) => {\n      const newValues = snapshot.val();\n      if (newValues) {\n        _values = newValues;\n      }\n    });\n    await update(values);\n  };\n\n  const wait = async (): Promise<RoomInfo> =>\n    new Promise((resolve, reject) => {\n      _info.once(\"value\", snapshot => {\n        const newValues = snapshot.val();\n        if (newValues) {\n          _values = newValues;\n          resolve(_values);\n        } else {\n          reject(new Error(\"Room is invalid\"));\n        }\n      });\n    });\n\n  const subscribeInfo = (cb: FirebaseCB) => {\n    _info.on(\"value\", cb);\n  };\n\n  const unsubscribeInfo = (cb: FirebaseCB) => {\n    _info.off(\"value\", cb);\n  };\n\n  const subscribeMembers = (cbAdded: FirebaseCB, cbRemoved: FirebaseCB) => {\n    _members.on(\"child_added\", cbAdded);\n    _members.on(\"child_removed\", cbRemoved);\n  };\n\n  const unsubscribeMembers = (cbAdded: FirebaseCB, cbRemoved: FirebaseCB) => {\n    _members.off(\"child_added\", cbAdded);\n    _members.off(\"child_removed\", cbRemoved);\n  };\n\n  const update = async ({\n    container_id,\n    container_type,\n    name,\n    track_id,\n    track_position,\n    type\n  }: Partial<\n    Pick<\n      RoomInfo,\n      | \"container_id\"\n      | \"container_type\"\n      | \"name\"\n      | \"track_id\"\n      | \"track_position\"\n      | \"type\"\n    >\n  >) => {\n    if (container_id !== void 0) {\n      _values.container_id = container_id;\n    }\n    if (container_type !== void 0) {\n      _values.container_type = container_type;\n    }\n    if (name !== void 0) {\n      _values.name = name;\n    }\n    if (track_id !== void 0) {\n      _values.track_id = track_id;\n    }\n    if (track_position !== void 0) {\n      _values.track_position = track_position;\n    }\n    if (type !== void 0) {\n      _values.type = type;\n    }\n    await _room.set({\n      info: {\n        ..._values,\n        timestamp: firebase.database.ServerValue.TIMESTAMP\n      },\n      secret\n    });\n  };\n\n  return {\n    getInfo,\n    id,\n    init,\n    wait,\n    subscribeInfo,\n    subscribeMembers,\n    unsubscribeInfo,\n    unsubscribeMembers,\n    update\n  };\n};\n\n// ------------------------------------------------------------------\n\nexport const User = (id: string, secret?: string) => {\n  const _user = USERS.child(id);\n  const _info = _user.child(\"info\");\n  let _membership: firebase.database.Reference | null = null;\n  let _values = {\n    name: \"dummy\",\n    online: false,\n    room_id: \"\",\n    status: \"\",\n    timestamp: 0\n  };\n\n  const getInfo = () => _values;\n\n  const init = async (values: Pick<UserInfo, \"name\">) => {\n    subscribeInfo((snapshot: firebase.database.DataSnapshot) => {\n      const newValues = snapshot.val();\n      if (newValues) {\n        _values = newValues;\n      }\n    });\n    await update(values);\n  };\n\n  const wait = async (): Promise<UserInfo> =>\n    new Promise((resolve, reject) => {\n      _info.once(\"value\", snapshot => {\n        const newValues = snapshot.val();\n        if (newValues) {\n          _values = newValues;\n          resolve(_values);\n        } else {\n          reject(new Error(\"User is invalid\"));\n        }\n      });\n    });\n\n  const subscribeInfo = (cb: FirebaseCB) => {\n    _info.on(\"value\", cb);\n  };\n\n  const unsubscribeInfo = (cb: FirebaseCB) => {\n    _info.off(\"value\", cb);\n  };\n\n  const update = async ({\n    name,\n    room_id\n  }: Partial<Pick<UserInfo, \"name\" | \"room_id\">>) => {\n    if (name !== void 0) {\n      _values.name = name;\n    }\n    if (room_id !== void 0) {\n      _values.room_id = room_id;\n    }\n    await _user.set({\n      info: {\n        ..._values,\n        online: true,\n        status: \"online\",\n        timestamp: firebase.database.ServerValue.TIMESTAMP\n      },\n      secret\n    });\n    installDisconnect();\n  };\n\n  const installDisconnect = () => {\n    _user.onDisconnect().cancel();\n    _user.onDisconnect().set({\n      info: {\n        ..._values,\n        online: false,\n        room_id: \"\",\n        status: \"disconnected\",\n        timestamp: firebase.database.ServerValue.TIMESTAMP\n      },\n      secret\n    });\n  };\n\n  const enter = async (room: ReturnType<typeof Room>) => {\n    if (_membership) {\n      await _membership.remove();\n      _membership = null;\n    }\n    await update({\n      room_id: room.id\n    });\n    _membership = MEMBERS.child(room.id).child(id);\n    _membership.onDisconnect().remove();\n    await _membership.set({\n      timestamp: firebase.database.ServerValue.TIMESTAMP\n    });\n  };\n\n  const exit = async () => {\n    if (_membership) {\n      await _membership.remove();\n      _membership = null;\n    }\n    await update({\n      room_id: \"\"\n    });\n  };\n\n  return {\n    id,\n    enter,\n    exit,\n    init,\n    wait,\n    subscribeInfo,\n    unsubscribeInfo,\n    update,\n    getInfo\n  };\n};\n\n// ------------------------------------------------------------------\n\nexport const Party = (id: string, room: ReturnType<typeof Room>) => {\n  const _members: string[] = [];\n  const _users: { [id: string]: ReturnType<typeof User> } = {};\n  let _info = {\n    container_id: \"\",\n    container_type: \"\",\n    name: \"\",\n    track_id: 0,\n    track_position: 0,\n    timestamp: 0,\n    type: \"dj\"\n  };\n\n  const _onAdded = (added: firebase.database.DataSnapshot) => {\n    const userId = added.key;\n    if (userId) {\n      const index = _members.indexOf(userId);\n      if (index === -1) {\n        _members.push(userId);\n        _users[userId] = User(userId);\n        _log();\n      }\n    }\n  };\n\n  const _onRemoved = (removed: firebase.database.DataSnapshot) => {\n    const userId = removed.key;\n    if (userId) {\n      const index = _members.indexOf(userId);\n      if (index !== -1) {\n        _members.splice(index, 1);\n        delete _users[userId];\n        _log();\n      }\n    }\n  };\n\n  const _onRoomInfo = (snapshot: firebase.database.DataSnapshot) => {\n    const newValues = snapshot.val() as RoomInfo | null;\n    if (newValues) {\n      _info = newValues;\n      _log();\n    }\n  };\n\n  const _log = () => {\n    console.log(\n      `PARTY ${id} room=${_info.name} type=${_info.type} playlist=${_info.container_type}/${_info.container_id}/${_info.track_id}/${_info.track_position} members=${_members}`\n    );\n  };\n\n  const init = () => {\n    room.subscribeInfo(_onRoomInfo);\n    room.subscribeMembers(_onAdded, _onRemoved);\n  };\n\n  const terminate = () => {\n    room.unsubscribeInfo(_onRoomInfo);\n    room.unsubscribeMembers(_onAdded, _onRemoved);\n  };\n\n  return {\n    init,\n    terminate\n  };\n};\n\n// ------------------------------------------------------------------\n// ------------------------------------------------------------------\n// ------------------------------------------------------------------\n\nexport const testRoom = async () => {\n  const room = Room(\"r1\", \"rs1\");\n  await room.init({ name: \"R1\" });\n  room.subscribeInfo(info => console.log(\"ROOM\", info.val()));\n  room.subscribeMembers(\n    members => console.log(\"ADDED\", members.key),\n    members => console.log(\"REMOVED\", members.key)\n  );\n  await room.init({ name: \"R1\" });\n  await sleep(1000);\n  await room.update({\n    container_id: \"42\",\n    container_type: \"playlist\",\n    name: \"R1b\",\n    track_id: 43,\n    track_position: 44\n  });\n};\n\nexport const testUser = async () => {\n  const user = User(\"u1\", \"us1\");\n  user.subscribeInfo(info => console.log(\"USER\", info.val()));\n  await user.init({ name: \"U1\" });\n  await sleep(1000);\n  await user.update({ name: \"U1b\" });\n};\n\nexport const testParty = async () => {\n  const room1 = Room(\"r1\", \"rs1\");\n  room1.init({ name: \"R1\" });\n  const room2 = Room(\"r2\", \"rs2\");\n  room2.init({ name: \"R2\" });\n  const user1 = User(\"u1\", \"us1\");\n  user1.init({ name: \"U1\" });\n  const user2 = User(\"u2\", \"us2\");\n  user2.init({ name: \"U2\" });\n\n  await sleep(2000);\n\n  const party1 = Party(\"P1\", room1);\n  party1.init();\n  const party2 = Party(\"P2\", room2);\n  party2.init();\n\n  await sleep(1000);\n  user1.enter(room1);\n  await sleep(1000);\n  user2.enter(room1);\n  await sleep(1000);\n  user1.enter(room2);\n  await sleep(1000);\n  user1.exit();\n  await sleep(1000);\n  user1.enter(room1);\n};\n\nexport const test = () => {\n  // testRoom();\n  // testUser();\n  // testParty();\n};\n","import { createAction, AsyncAction } from \".\";\n\n// ------------------------------------------------------------------\n\nlet MESSAGE_ID_GENERATOR: number = 0;\n\nexport const extractErrorMessage = (err: any) =>\n  err.response && err.response.data && err.response.data.message\n    ? err.response.data.message\n    : err.message;\n\nexport type Message = {\n  id: number;\n  text: string;\n  type: string;\n};\n\nexport type MessagesAction =\n  | ReturnType<typeof addMessage>\n  | ReturnType<typeof removeMessage>;\n\nconst addMessage = (message: Message) => createAction(\"message/ADD\", message);\n\nconst removeMessage = (id: number) => createAction(\"message/REMOVE\", id);\n\nexport const displayMessage = (\n  type: string,\n  text: string,\n  duration: number = 5000\n): AsyncAction => (dispatch): any => {\n  const id = MESSAGE_ID_GENERATOR++;\n  dispatch(addMessage({ id, text, type }));\n  setTimeout(() => dispatch(removeMessage(id)), duration);\n};\n\nexport const displayError = (text: string, error?: any): AsyncAction => (\n  dispatch\n): any => {\n  dispatch(\n    displayMessage(\n      \"error\",\n      error ? `${text}: ${extractErrorMessage(error)}` : text,\n      3000\n    )\n  );\n};\n\nexport const displayInfo = (text: string) => displayMessage(\"info\", text, 3000);\n","import { AxiosError } from \"axios\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { createAction, AsyncAction } from \".\";\nimport { RootState } from \"../reducers\";\nimport { Users, User } from \"../utils/users\";\nimport { User as FirebaseUser } from \"../utils/firebase\";\nimport { v4 } from \"uuid\";\nimport { displayError } from \"./messages\";\n\n// ------------------------------------------------------------------\n\nexport type UsersAction =\n  | ReturnType<typeof fetching>\n  | ReturnType<typeof success>\n  | ReturnType<typeof error>\n  | ReturnType<typeof reset>\n  | ReturnType<typeof setUser>\n  | ReturnType<typeof setUsers>;\n\ntype Dispatch = ThunkDispatch<RootState, any, UsersAction>;\n\nconst fetching = () => createAction(\"users/FETCHING\");\nconst success = () => createAction(\"users/FETCHED\");\nconst error = (error: AxiosError) => createAction(\"users/ERROR\", error);\nconst reset = () => createAction(\"users/RESET\");\nconst setUser = (id: string, secret: string) =>\n  createAction(\"users/SET_USER\", { id, secret });\nconst setUsers = (users: Users) => createAction(\"users/SET_USERS\", users);\n\n// ------------------------------------------------------------------\n\nexport const createUser = (\n  name: string,\n  secret: string\n): AsyncAction => async dispatch => {\n  try {\n    console.log(\"Creating user...\");\n    const id = v4();\n    await FirebaseUser(id, secret).init({ name });\n    dispatch(connectUser(id, secret));\n  } catch (err) {\n    dispatch(displayError(\"Cannot create user\", err));\n  }\n};\n\n// ------------------------------------------------------------------\n\nlet FIREBASE_USER: ReturnType<typeof FirebaseUser> | null = null;\nlet FIREBASE_CB: any = null;\n\nexport const connectUser = (\n  id: string,\n  secret: string\n): AsyncAction => async dispatch => {\n  dispatch(disconnectUser());\n  try {\n    console.log(\"Connection user...\", { id, secret });\n    const user = FirebaseUser(id);\n    dispatch(setUsers({ [id]: await user.wait() }));\n    dispatch(setUser(id, secret));\n    FIREBASE_CB = (snapshot: firebase.database.DataSnapshot) => {\n      dispatch(setUsers({ [id]: snapshot.val() as User }));\n    };\n    FIREBASE_USER = user;\n    FIREBASE_USER.subscribeInfo(FIREBASE_CB);\n  } catch (err) {\n    dispatch(displayError(\"Cannot connect user\", err));\n  }\n};\n\nexport const disconnectUser = (): AsyncAction => async dispatch => {\n  if (FIREBASE_USER) {\n    console.log(\"Disconnecting user...\");\n    FIREBASE_USER.unsubscribeInfo(FIREBASE_CB);\n    FIREBASE_USER = null;\n    FIREBASE_CB = null;\n    dispatch(setUser(\"\", \"\"));\n  }\n};\n\nexport const reconnectUser = (): AsyncAction => async (dispatch, getState) => {\n  const state = getState();\n  const { id, secret } = state.users.user;\n  if (id && secret) {\n    try {\n      console.log(\"Loading user...\");\n      dispatch(connectUser(id, secret));\n    } catch (err) {\n      dispatch(displayError(\"Cannot load user\", err));\n    }\n  }\n};\n","import { RootState } from \"../reducers\";\nimport { User } from \"../utils/users\";\n\nexport const extractUser = (state: RootState, id: string): User | null => {\n  const user = state.users.users[id];\n  if (!user) {\n    return null;\n  }\n  return user;\n};\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../reducers\";\nimport { openModal } from \"../actions/modals\";\nimport Menu from \"../components/Menu\";\nimport { disconnectUser } from \"../actions/users\";\nimport { extractUser } from \"../selectors/users\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState) => ({\n  user: extractUser(state, state.users.user.id)\n});\n\nconst dispatchToProps = (dispatch: ThunkDispatch<RootState, any, any>) => ({\n  createRoom: () => dispatch(openModal({ type: \"CreateRoom\", props: null })),\n  enterRoom: () => dispatch(openModal({ type: \"JoinRoom\", props: null })),\n  connectUser: () => dispatch(openModal({ type: \"ConnectUser\", props: null })),\n  disconnectUser: () => dispatch(disconnectUser())\n});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(Menu);\n","import React, { Component } from \"react\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n//\nimport { MappedProps } from \"../../containers/Rooms/Room\";\nimport Menu from \"../../containers/Menu\";\nimport { createSharingUrl } from \"../../utils/rooms\";\n\n// ------------------------------------------------------------------\n\nexport type Props = RouteComponentProps<{\n  room_id: string;\n}>;\n\nclass Room extends Component<Props & MappedProps> {\n  public componentDidMount = () => {\n    this.props.onEnter();\n  };\n\n  public componentWillUnmount = () => {\n    this.props.onExit();\n  };\n\n  public render = () => {\n    return (\n      <div className=\"Room\">\n        <Menu />\n        <div>{this.props.match.params.room_id}</div>\n        <div>{this.props.room ? this.props.room.name : \"?\"}</div>\n        <div>{createSharingUrl(this.props.match.params.room_id)}</div>\n      </div>\n    );\n  };\n}\n\nexport default withRouter(Room);\n","export type Room = {\n  container_id: string;\n  container_type: string;\n  name: string;\n  timestamp: number;\n  track_id: number;\n  track_position: number;\n  type: string;\n};\n\nexport type Rooms = { [id: string]: Room };\n\nexport const createSharingUrl = (id: string) =>\n  `${window.location.origin}/#/room/${id}`;\n","import { createHashHistory } from \"history\";\n\nexport default createHashHistory();\n","import { AxiosError } from \"axios\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { v4 } from \"uuid\";\n//\nimport { createAction, AsyncAction } from \".\";\nimport { displayError } from \"./messages\";\nimport { RootState } from \"../reducers\";\nimport { Rooms, Room } from \"../utils/rooms\";\nimport { Room as FirebaseRoom } from \"../utils/firebase\";\nimport history from \"../utils/history\";\n\n// ------------------------------------------------------------------\n\nexport type RoomsAction =\n  | ReturnType<typeof fetching>\n  | ReturnType<typeof success>\n  | ReturnType<typeof error>\n  | ReturnType<typeof reset>\n  | ReturnType<typeof setRoom>\n  | ReturnType<typeof setRooms>;\n\ntype Dispatch = ThunkDispatch<RootState, any, RoomsAction>;\n\nconst fetching = () => createAction(\"rooms/FETCHING\");\nconst success = () => createAction(\"rooms/FETCHED\");\nconst error = (error: AxiosError) => createAction(\"rooms/ERROR\", error);\nconst reset = () => createAction(\"rooms/RESET\");\nconst setRoom = (id: string) => createAction(\"rooms/SET_ROOM\", id);\nconst setRooms = (rooms: Rooms) => createAction(\"rooms/SET_ROOMS\", rooms);\n\n// ------------------------------------------------------------------\n\nexport const createRoom = (\n  name: string,\n  secret: string\n): AsyncAction => async dispatch => {\n  try {\n    console.log(\"Creating room...\");\n    const id = v4();\n    await FirebaseRoom(id, secret).init({ name });\n    dispatch(enterRoom(id));\n  } catch (err) {\n    dispatch(displayError(\"Cannot create room\", err));\n  }\n};\n\n// ------------------------------------------------------------------\n\nlet FIREBASE_ROOM: ReturnType<typeof FirebaseRoom> | null = null;\nlet FIREBASE_CB: any = null;\n\nexport const enterRoom = (id: string): AsyncAction => async dispatch => {\n  if (!FIREBASE_ROOM || FIREBASE_ROOM.id !== id) {\n    dispatch(exitRoom());\n    try {\n      console.log(\"Entering room...\", { id });\n      const room = FirebaseRoom(id);\n      dispatch(setRooms({ [id]: await room.wait() }));\n      dispatch(setRoom(id));\n      FIREBASE_CB = (snapshot: firebase.database.DataSnapshot) => {\n        dispatch(setRooms({ [id]: snapshot.val() as Room }));\n      };\n      FIREBASE_ROOM = room;\n      FIREBASE_ROOM.subscribeInfo(FIREBASE_CB);\n      history.push(`/room/${id}`);\n    } catch (err) {\n      dispatch(displayError(\"Cannot join room\", err));\n    }\n  }\n};\n\nexport const exitRoom = (): AsyncAction => async dispatch => {\n  if (FIREBASE_ROOM) {\n    console.log(\"Exiting room...\");\n    FIREBASE_ROOM.unsubscribeInfo(FIREBASE_CB);\n    FIREBASE_ROOM = null;\n    FIREBASE_CB = null;\n    dispatch(setRoom(\"\"));\n  }\n};\n","import { RootState } from \"../reducers\";\nimport { Room } from \"../utils/rooms\";\n\nexport const extractRoom = (state: RootState, id: string): Room | null => {\n  const room = state.rooms.rooms[id];\n  if (!room) {\n    return null;\n  }\n  return room;\n};\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../../reducers\";\nimport Room, { Props } from \"../../components/Rooms/Room\";\nimport { enterRoom, exitRoom } from \"../../actions/rooms\";\nimport { extractRoom } from \"../../selectors/rooms\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState, ownProps: Props) => ({\n  room: extractRoom(state, ownProps.match.params.room_id)\n});\n\nconst dispatchToProps = (\n  dispatch: ThunkDispatch<RootState, any, any>,\n  ownProps: Props\n) => ({\n  onEnter: () => dispatch(enterRoom(ownProps.match.params.room_id)),\n  onExit: () => dispatch(exitRoom())\n});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(Room);\n","import React, { Component } from \"react\";\n//\nimport { MappedProps } from \"../../containers/Splash\";\nimport Menu from \"../../containers/Menu\";\n\n// ------------------------------------------------------------------\n\nclass Splash extends Component<MappedProps> {\n  public componentDidMount = async () => {};\n\n  public render = () => {\n    return (\n      <div className=\"Splash\">\n        <Menu />\n      </div>\n    );\n  };\n}\n\nexport default Splash;\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../../reducers\";\nimport Splash from \"../../components/Splash\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState) => ({});\n\nconst dispatchToProps = (dispatch: ThunkDispatch<RootState, any, any>) => ({});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(Splash);\n","import React, { Component, FormEvent, ReactNode } from \"react\";\nimport classNames from \"classnames\";\n//\nimport { MappedProps } from \"../../containers/Modals/Modal\";\nimport IconButton from \"../Common/IconButton\";\n\n// ------------------------------------------------------------------\n\ntype Props = {\n  children: ReactNode;\n  className?: string;\n  title: string;\n  renderFoot?: () => React.ReactNode;\n  onSubmit?: () => void;\n};\n\nclass Modal extends Component<Props & MappedProps> {\n  public render = () => {\n    const {\n      children,\n      className,\n      title,\n      renderFoot,\n      onClose,\n      onPop,\n      has_prev_modal\n    } = this.props;\n    return (\n      <form className={classNames(\"Modal\", className)} onSubmit={this.onSubmit}>\n        <div className=\"ModalHead\">\n          <IconButton\n            kind=\"special\"\n            className={classNames(\"ModalHeadBack\", {\n              hidden: !has_prev_modal\n            })}\n            icon=\"angle-left\"\n            title=\"Back\"\n            onClick={onPop}\n          />\n          <div className=\"ModalTitle\">{title}</div>\n          <IconButton\n            kind=\"special\"\n            className=\"ModalHeadClose\"\n            onClick={onClose}\n            title=\"Cancel\"\n            icon=\"times\"\n          />\n        </div>\n        <div className=\"ModalBody\">{children}</div>\n        <div className=\"ModalFoot\">{renderFoot && renderFoot()}</div>\n      </form>\n    );\n  };\n\n  private onSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (this.props.onSubmit) {\n      this.props.onSubmit();\n    }\n  };\n}\n\nexport default Modal;\n","import { connect } from \"react-redux\";\n//\nimport Modal from \"../../components/Modals/Modal\";\nimport { RootState } from \"../../reducers\";\nimport { popModal } from \"../../actions/modals\";\n\n// ------------------------------------------------------------------\n\nconst mapStateToProps = (state: RootState) => ({\n  has_prev_modal: state.modals.stack.length > 1\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  onClose: () => dispatch(popModal()),\n  onPop: () => dispatch(popModal())\n});\n\nexport type MappedProps = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Modal);\n","import React, { Component } from \"react\";\nimport classNames from \"classnames\";\n//\nimport Modal from \"../../containers/Modals/Modal\";\n\n// ------------------------------------------------------------------\n\ntype Props = {\n  className?: string;\n  onSubmit: () => void;\n  renderButtons: () => React.ReactNode;\n  title: string;\n};\n\nclass FormModal extends Component<Props> {\n  public render = () => {\n    const { children, className, renderButtons, title, onSubmit } = this.props;\n    return (\n      <Modal\n        className={classNames(\"FormModal\", className)}\n        title={title}\n        renderFoot={renderButtons}\n        onSubmit={onSubmit}\n      >\n        {children}\n      </Modal>\n    );\n  };\n}\n\nexport default FormModal;\n","import React, { Component, Fragment, RefObject, createRef } from \"react\";\nimport { v4 } from \"uuid\";\n//\nimport FormModal from \"../Modals/FormModal\";\nimport { MappedProps } from \"../../containers/Rooms/CreateRoomModal\";\nimport IconButton, { CancelButton } from \"../Common/IconButton\";\n\n// ------------------------------------------------------------------\n\ntype State = {\n  name: string;\n  secret: string;\n};\n\nclass CreateRoomModal extends Component<MappedProps, State> {\n  private nameRef: RefObject<HTMLInputElement> = createRef();\n\n  public readonly state: State = {\n    name: \"\",\n    secret: v4()\n  };\n\n  public componentDidMount() {\n    if (this.nameRef.current) {\n      this.nameRef.current.focus();\n    }\n  }\n\n  public render = () => {\n    const { name, secret } = this.state;\n    return (\n      <FormModal\n        title=\"Create Room\"\n        onSubmit={this.onCreate}\n        renderButtons={this.renderButtons}\n      >\n        <div className=\"ModalField\">\n          <label htmlFor=\"modal-name\">Room Name</label>\n          <input\n            id=\"modal-name\"\n            type=\"text\"\n            placeholder=\"Room Name...\"\n            value={name}\n            ref={this.nameRef}\n            onChange={e => {\n              this.setState({ name: e.target.value });\n            }}\n          />\n        </div>\n        <div className=\"ModalField\">\n          <label htmlFor=\"modal-secret\">Room Secret</label>\n          <input\n            id=\"modal-secret\"\n            type=\"text\"\n            placeholder=\"Room Secret...\"\n            value={secret}\n            onChange={e => {\n              this.setState({ secret: e.target.value });\n            }}\n          />\n        </div>\n      </FormModal>\n    );\n  };\n\n  private renderButtons = () => (\n    <Fragment>\n      <IconButton title=\"Create\" kind=\"primary\" icon=\"plus\" type=\"submit\" />\n      <CancelButton onClick={this.props.onClose} />\n    </Fragment>\n  );\n\n  private onCreate = () => {\n    const { onClose, onCreate, onError } = this.props;\n    const { name, secret } = this.state;\n    if (name.trim().length === 0) {\n      onError(\"Room name is invalid\");\n      return;\n    }\n    if (secret.trim().length === 0) {\n      onError(\"Room secret is invalid\");\n      return;\n    }\n    onCreate(name, secret);\n    onClose();\n  };\n}\n\nexport default CreateRoomModal;\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../../reducers\";\nimport CreateRoomModal from \"../../components/Rooms/CreateRoomModal\";\nimport { createRoom } from \"../../actions/rooms\";\nimport { popModal } from \"../../actions/modals\";\nimport { displayError } from \"../../actions/messages\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState) => {\n  return {};\n};\n\nconst dispatchToProps = (dispatch: ThunkDispatch<RootState, any, any>) => ({\n  onClose: () => dispatch(popModal()),\n  onCreate: (name: string, secret: string) =>\n    dispatch(createRoom(name, secret)),\n  onError: (message: string) => dispatch(displayError(message))\n});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(CreateRoomModal);\n","import React, { Component, Fragment, RefObject, createRef } from \"react\";\nimport { v4 } from \"uuid\";\n//\nimport FormModal from \"../Modals/FormModal\";\nimport { MappedProps } from \"../../containers/Users/ConnectUserModal\";\nimport IconButton, { CancelButton } from \"../Common/IconButton\";\n\n// ------------------------------------------------------------------\n\ntype State = {\n  name: string;\n  secret: string;\n};\n\nclass ConnectUserModal extends Component<MappedProps, State> {\n  private nameRef: RefObject<HTMLInputElement> = createRef();\n\n  public readonly state: State = {\n    name: \"\",\n    secret: v4()\n  };\n\n  public componentDidMount() {\n    if (this.nameRef.current) {\n      this.nameRef.current.focus();\n    }\n  }\n\n  public render = () => {\n    const { name, secret } = this.state;\n    return (\n      <FormModal\n        title=\"Create User\"\n        onSubmit={this.onCreate}\n        renderButtons={this.renderButtons}\n      >\n        <div className=\"ModalField\">\n          <label htmlFor=\"modal-name\">User Name</label>\n          <input\n            id=\"modal-name\"\n            type=\"text\"\n            placeholder=\"User Name...\"\n            value={name}\n            ref={this.nameRef}\n            onChange={e => {\n              this.setState({ name: e.target.value });\n            }}\n          />\n        </div>\n        <div className=\"ModalField\">\n          <label htmlFor=\"modal-secret\">User Secret</label>\n          <input\n            id=\"modal-secret\"\n            type=\"text\"\n            placeholder=\"User Secret...\"\n            value={secret}\n            onChange={e => {\n              this.setState({ secret: e.target.value });\n            }}\n          />\n        </div>\n      </FormModal>\n    );\n  };\n\n  private renderButtons = () => (\n    <Fragment>\n      <IconButton title=\"Create\" kind=\"primary\" icon=\"plus\" type=\"submit\" />\n      <CancelButton onClick={this.props.onClose} />\n    </Fragment>\n  );\n\n  private onCreate = () => {\n    const { onClose, onCreate, onError } = this.props;\n    const { name, secret } = this.state;\n    if (name.trim().length === 0) {\n      onError(\"User name is invalid\");\n      return;\n    }\n    if (secret.trim().length === 0) {\n      onError(\"User secret is invalid\");\n      return;\n    }\n    onCreate(name, secret);\n    onClose();\n  };\n}\n\nexport default ConnectUserModal;\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../../reducers\";\nimport ConnectUserModal from \"../../components/Users/ConnectUserModal\";\nimport { createUser } from \"../../actions/users\";\nimport { popModal } from \"../../actions/modals\";\nimport { displayError } from \"../../actions/messages\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState) => {\n  return {};\n};\n\nconst dispatchToProps = (dispatch: ThunkDispatch<RootState, any, any>) => ({\n  onClose: () => dispatch(popModal()),\n  onCreate: (name: string, secret: string) =>\n    dispatch(createUser(name, secret)),\n  onError: (message: string) => dispatch(displayError(message))\n});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(ConnectUserModal);\n","import React, { Component, Fragment, createRef, RefObject } from \"react\";\n//\nimport FormModal from \"../Modals/FormModal\";\nimport { MappedProps } from \"../../containers/Rooms/JoinRoomModal\";\nimport IconButton, { CancelButton } from \"../Common/IconButton\";\n\n// ------------------------------------------------------------------\n\ntype State = {\n  roomId: string;\n};\n\nclass JoinRoomModal extends Component<MappedProps, State> {\n  private idRef: RefObject<HTMLInputElement> = createRef();\n\n  public readonly state: State = {\n    roomId: \"\"\n  };\n\n  public componentDidMount() {\n    if (this.idRef.current) {\n      this.idRef.current.focus();\n    }\n  }\n\n  public render = () => {\n    const { roomId } = this.state;\n    return (\n      <FormModal\n        title=\"Join Room\"\n        onSubmit={this.onJoin}\n        renderButtons={this.renderButtons}\n      >\n        <div className=\"ModalField\">\n          <label htmlFor=\"modal-roomId\">Room ID</label>\n          <input\n            id=\"modal-roomId\"\n            type=\"text\"\n            placeholder=\"Room ID...\"\n            value={roomId}\n            ref={this.idRef}\n            onChange={e => {\n              this.setState({ roomId: e.target.value });\n            }}\n          />\n        </div>\n      </FormModal>\n    );\n  };\n\n  private renderButtons = () => (\n    <Fragment>\n      <IconButton title=\"Join\" kind=\"primary\" icon=\"sign-in\" type=\"submit\" />\n      <CancelButton onClick={this.props.onClose} />\n    </Fragment>\n  );\n\n  private onJoin = () => {\n    const { onClose, onEnter } = this.props;\n    const { roomId } = this.state;\n    if (roomId.trim().length === 0) {\n      console.log(\"Room ID is invalid\");\n      return;\n    }\n    onEnter(roomId);\n    onClose();\n  };\n}\n\nexport default JoinRoomModal;\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../../reducers\";\nimport JoinRoomModal from \"../../components/Rooms/JoinRoomModal\";\nimport { enterRoom } from \"../../actions/rooms\";\nimport { popModal } from \"../../actions/modals\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState) => {\n  return {};\n};\n\nconst dispatchToProps = (dispatch: ThunkDispatch<RootState, any, any>) => ({\n  onClose: () => dispatch(popModal()),\n  onEnter: (id: string) => dispatch(enterRoom(id))\n});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(JoinRoomModal);\n","import React, { Component, MouseEvent } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\n//\nimport { MappedProps } from \"../../containers/Modals\";\nimport { ModalPrereq } from \"../../actions/modals\";\nimport CreateRoomModal from \"../../containers/Rooms/CreateRoomModal\";\nimport ConnectUserModal from \"../../containers/Users/ConnectUserModal\";\nimport JoinRoomModal from \"../../containers/Rooms/JoinRoomModal\";\nimport \"./index.scss\";\n\n// ------------------------------------------------------------------\n\nconst TransitionTimeout = 300;\n\n// ------------------------------------------------------------------\n\nexport const getModal = (prereq: ModalPrereq) => {\n  switch (prereq.type) {\n    case \"CreateRoom\":\n      return <CreateRoomModal />;\n    case \"JoinRoom\":\n      return <JoinRoomModal />;\n    case \"ConnectUser\":\n      return <ConnectUserModal />;\n  }\n};\n\n// ------------------------------------------------------------------\n\ntype State = {\n  curr_prereq?: ModalPrereq;\n  prev_prereq?: ModalPrereq; // Keeping prev modal prereq for modal fadeout\n};\n\nclass Modals extends Component<MappedProps, State> {\n  public readonly state: State = {\n    curr_prereq: void 0,\n    prev_prereq: void 0\n  };\n\n  public componentDidMount = () => {\n    document.addEventListener(\"keydown\", this.onKeyDown);\n  };\n\n  public componentWillUnmount = () => {\n    document.removeEventListener(\"keydown\", this.onKeyDown);\n  };\n\n  public componentDidUpdate = (prevProps: MappedProps) => {\n    const oldPrereq = prevProps.prereq;\n    const newPrereq = this.props.prereq;\n    if (oldPrereq !== newPrereq) {\n      // Hide current modal before showing new one (if there is a new one)\n      this.setState(\n        {\n          curr_prereq: void 0,\n          prev_prereq: oldPrereq\n        },\n        () => {\n          if (newPrereq) {\n            setTimeout(() => {\n              this.setState({\n                curr_prereq: newPrereq\n              });\n            }, TransitionTimeout);\n          }\n        }\n      );\n    }\n  };\n\n  public render = () => {\n    const { curr_prereq, prev_prereq } = this.state;\n    const prereq = curr_prereq || prev_prereq;\n    let modal = null;\n    if (prereq) {\n      modal = getModal(prereq);\n    }\n    return (\n      <CSSTransition\n        in={!!curr_prereq}\n        timeout={TransitionTimeout}\n        unmountOnExit={true}\n      >\n        <div className=\"ModalOverlay\" onClick={this.onClickOverlay}>\n          {modal && (\n            <div\n              className=\"ModalWrapper\"\n              role=\"dialog\"\n              onClick={this.onClickWrapper}\n            >\n              {modal}\n            </div>\n          )}\n        </div>\n      </CSSTransition>\n    );\n  };\n\n  private onClickOverlay = (event: MouseEvent) => {\n    // Clicking overlay will close current modal\n    event.stopPropagation();\n    this.props.onCloseModal();\n  };\n\n  private onClickWrapper = (event: MouseEvent) => {\n    // Clicking wrapper modal will not progagate to overlay which would close current modal\n    event.stopPropagation();\n  };\n\n  private onKeyDown = (e: KeyboardEvent) => {\n    if (e.keyCode === 27) {\n      this.props.onCloseModal();\n    }\n  };\n}\n\nexport default Modals;\n","import { connect } from \"react-redux\";\n//\nimport Modals from \"../../components/Modals\";\nimport { RootState } from \"../../reducers\";\nimport { popModal } from \"../../actions/modals\";\n\n// ------------------------------------------------------------------\n\nconst mapStateToProps = (state: RootState) => ({\n  prereq:\n    state.modals.stack.length > 0\n      ? state.modals.stack[state.modals.stack.length - 1]\n      : void 0\n});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n  onCloseModal: () => dispatch(popModal())\n});\n\nexport type MappedProps = ReturnType<typeof mapStateToProps> &\n  ReturnType<typeof mapDispatchToProps>;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Modals);\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { TransitionGroup, CSSTransition } from \"react-transition-group\";\n//\nimport { Message } from \"../actions/messages\";\nimport \"./Messages.scss\";\n\n// ------------------------------------------------------------------\n\ntype Props = {\n  messages: Message[];\n};\n\nclass Messages extends React.Component<Props> {\n  public render = () => (\n    <div className=\"Messages\">\n      <TransitionGroup>\n        {this.props.messages.map(message => this.renderMessage(message))}\n      </TransitionGroup>\n    </div>\n  );\n\n  public renderMessage(message: Message) {\n    return (\n      <CSSTransition\n        key={message.id}\n        classNames=\"Message\"\n        timeout={{ enter: 200, exit: 200 }}\n      >\n        <div className={classNames(\"Message\", \"Message-\" + message.type)}>\n          {message.text}\n        </div>\n      </CSSTransition>\n    );\n  }\n}\n\nexport default Messages;\n","import { connect } from \"react-redux\";\n//\nimport { RootState } from \"../reducers\";\nimport Messages from \"../components/Messages\";\n\n// ------------------------------------------------------------------\n\nexport type MappedProps = ReturnType<typeof mapStateToProps>;\n\nconst mapStateToProps = (state: RootState) => ({\n  messages: state.messages\n});\n\nexport default connect(mapStateToProps)(Messages);\n","import React, { Component } from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\n//\nimport { MappedProps } from \"../containers/App\";\nimport Room from \"../containers/Rooms/Room\";\nimport Splash from \"../containers/Splash\";\nimport Modals from \"../containers/Modals\";\nimport Messages from \"../containers/Messages\";\n\n// ------------------------------------------------------------------\n\nclass App extends Component<MappedProps> {\n  public componentDidMount = async () => {\n    this.props.onReconnect();\n  };\n\n  public render = () => {\n    return (\n      <div className=\"App\">\n        <Modals />\n        <Switch>\n          <Route exact={true} path=\"/room/:room_id\" component={Room} />\n          <Route exact={true} path=\"/\" component={Splash} />\n          <Redirect to=\"/\" />\n        </Switch>\n        <Messages />\n      </div>\n    );\n  };\n}\n\nexport default App;\n","import { connect } from \"react-redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\n//\nimport { RootState } from \"../reducers\";\nimport App from \"../components/App\";\nimport { reconnectUser } from \"../actions/users\";\n\n// ------------------------------------------------------------------\n\nconst stateToProps = (state: RootState) => ({});\n\nconst dispatchToProps = (dispatch: ThunkDispatch<RootState, any, any>) => ({\n  onReconnect: () => dispatch(reconnectUser())\n});\n\nexport type MappedProps = ReturnType<typeof stateToProps> &\n  ReturnType<typeof dispatchToProps>;\n\nexport default connect(stateToProps, dispatchToProps)(App);\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { Route, HashRouter } from \"react-router-dom\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { applyMiddleware, createStore, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n//\nimport { rootReducer } from \"./reducers\";\nimport App from \"./containers/App\";\nimport \"./index.scss\";\n\n// ------------------------------------------------------------------\n\nconst composeEnhancers =\n  process.env.NODE_ENV === \"development\" ? composeWithDevTools({}) : compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <Route path=\"/\" component={App} />\n    </HashRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}